#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxPhysics

#include "Basic.hpp"

#include "GbxPhysics_classes.hpp"
#include "GbxPhysics_parameters.hpp"


namespace SDK
{

// Function GbxPhysics.GbxPhysicsStatics.DebugResumeSimulation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkelMesh                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxPhysicsStatics::DebugResumeSimulation(class USkeletalMeshComponent* SkelMesh, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxPhysicsStatics", "DebugResumeSimulation");

	Params::GbxPhysicsStatics_DebugResumeSimulation Parms{};

	Parms.SkelMesh = SkelMesh;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxPhysics.GbxPhysicsStatics.DebugStepSimulation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkelMesh                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxPhysicsStatics::DebugStepSimulation(class USkeletalMeshComponent* SkelMesh, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxPhysicsStatics", "DebugStepSimulation");

	Params::GbxPhysicsStatics_DebugStepSimulation Parms{};

	Parms.SkelMesh = SkelMesh;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxPhysics.GbxPhysicsStatics.GetSimulationEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IForwardDynamicsInterface>DynamicsInterface                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxPhysicsStatics::GetSimulationEnabled(TScriptInterface<class IForwardDynamicsInterface> DynamicsInterface, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxPhysicsStatics", "GetSimulationEnabled");

	Params::GbxPhysicsStatics_GetSimulationEnabled Parms{};

	Parms.DynamicsInterface = DynamicsInterface;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxPhysics.GbxPhysicsStatics.ResetActorExtraCollisionFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxPhysicsStatics::ResetActorExtraCollisionFilter(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxPhysicsStatics", "ResetActorExtraCollisionFilter");

	Params::GbxPhysicsStatics_ResetActorExtraCollisionFilter Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxPhysics.GbxPhysicsStatics.ResetExtraCollisionFilter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  comp                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bPropagateToChildren                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxPhysicsStatics::ResetExtraCollisionFilter(class USceneComponent* comp, bool bPropagateToChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxPhysicsStatics", "ResetExtraCollisionFilter");

	Params::GbxPhysicsStatics_ResetExtraCollisionFilter Parms{};

	Parms.comp = comp;
	Parms.bPropagateToChildren = bPropagateToChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxPhysics.GbxPhysicsStatics.SetActorExtraCollisionFilter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EExtraCollisionFilterChannel            channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FExtraCollisionFilter&     ExtraCollisionFilter                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxPhysicsStatics::SetActorExtraCollisionFilter(class AActor* Actor, EExtraCollisionFilterChannel channel, const struct FExtraCollisionFilter& ExtraCollisionFilter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxPhysicsStatics", "SetActorExtraCollisionFilter");

	Params::GbxPhysicsStatics_SetActorExtraCollisionFilter Parms{};

	Parms.Actor = Actor;
	Parms.channel = channel;
	Parms.ExtraCollisionFilter = std::move(ExtraCollisionFilter);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxPhysics.GbxPhysicsStatics.SetDynamicsBehavior
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IForwardDynamicsInterface>DynamicsInterface                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FName                       BehaviorName                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxPhysicsStatics::SetDynamicsBehavior(TScriptInterface<class IForwardDynamicsInterface> DynamicsInterface, const class FName BehaviorName, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxPhysicsStatics", "SetDynamicsBehavior");

	Params::GbxPhysicsStatics_SetDynamicsBehavior Parms{};

	Parms.DynamicsInterface = DynamicsInterface;
	Parms.BehaviorName = BehaviorName;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxPhysics.GbxPhysicsStatics.SetExtraCollisionFilter
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USceneComponent*                  comp                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EExtraCollisionFilterChannel            channel                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FExtraCollisionFilter&     ExtraCollisionFilter                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bPropagateToChildren                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxPhysicsStatics::SetExtraCollisionFilter(class USceneComponent* comp, EExtraCollisionFilterChannel channel, const struct FExtraCollisionFilter& ExtraCollisionFilter, bool bPropagateToChildren)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxPhysicsStatics", "SetExtraCollisionFilter");

	Params::GbxPhysicsStatics_SetExtraCollisionFilter Parms{};

	Parms.comp = comp;
	Parms.channel = channel;
	Parms.ExtraCollisionFilter = std::move(ExtraCollisionFilter);
	Parms.bPropagateToChildren = bPropagateToChildren;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxPhysics.GbxPhysicsStatics.SetORDARSimulationEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkelMesh                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxPhysicsStatics::SetORDARSimulationEnabled(class USkeletalMeshComponent* SkelMesh, bool bEnable, class FName Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxPhysicsStatics", "SetORDARSimulationEnabled");

	Params::GbxPhysicsStatics_SetORDARSimulationEnabled Parms{};

	Parms.SkelMesh = SkelMesh;
	Parms.bEnable = bEnable;
	Parms.Tag = Tag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxPhysics.GbxPhysicsStatics.SetSimulationEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IForwardDynamicsInterface>DynamicsInterface                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Tag                                                    (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxPhysicsStatics::SetSimulationEnabled(TScriptInterface<class IForwardDynamicsInterface> DynamicsInterface, bool bEnable, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxPhysicsStatics", "SetSimulationEnabled");

	Params::GbxPhysicsStatics_SetSimulationEnabled Parms{};

	Parms.DynamicsInterface = DynamicsInterface;
	Parms.bEnable = bEnable;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxPhysics.PhysicsPerfTester.SpawnTestGeo
// (Final, Native, Public)

void APhysicsPerfTester::SpawnTestGeo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsPerfTester", "SpawnTestGeo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxPhysics.PhysicsPerfTester.Start
// (Final, Native, Public, BlueprintCallable)

void APhysicsPerfTester::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsPerfTester", "Start");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

