#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxElasticTelemetry

#include "Basic.hpp"

#include "GbxElasticTelemetry_classes.hpp"
#include "GbxElasticTelemetry_parameters.hpp"


namespace SDK
{

// Function GbxElasticTelemetry.GbxElasticTelemetryBlueprintLibrary.AreTelemetryRequestsPending
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxElasticTelemetryBlueprintLibrary::AreTelemetryRequestsPending()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxElasticTelemetryBlueprintLibrary", "AreTelemetryRequestsPending");

	Params::GbxElasticTelemetryBlueprintLibrary_AreTelemetryRequestsPending Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxElasticTelemetry.GbxElasticTelemetryBlueprintLibrary.GetTelemetryContextProperty
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString*                          Value                                                  (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxElasticTelemetryBlueprintLibrary::GetTelemetryContextProperty(const class FString& Name_0, class FString* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxElasticTelemetryBlueprintLibrary", "GetTelemetryContextProperty");

	Params::GbxElasticTelemetryBlueprintLibrary_GetTelemetryContextProperty Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = std::move(Parms.Value);

	return Parms.ReturnValue;
}


// Function GbxElasticTelemetry.GbxElasticTelemetryBlueprintLibrary.SetTelemetryContextPropertyFloat
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxElasticTelemetryBlueprintLibrary::SetTelemetryContextPropertyFloat(const class FString& Name_0, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxElasticTelemetryBlueprintLibrary", "SetTelemetryContextPropertyFloat");

	Params::GbxElasticTelemetryBlueprintLibrary_SetTelemetryContextPropertyFloat Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxElasticTelemetry.GbxElasticTelemetryBlueprintLibrary.SetTelemetryContextPropertyInt
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxElasticTelemetryBlueprintLibrary::SetTelemetryContextPropertyInt(const class FString& Name_0, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxElasticTelemetryBlueprintLibrary", "SetTelemetryContextPropertyInt");

	Params::GbxElasticTelemetryBlueprintLibrary_SetTelemetryContextPropertyInt Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxElasticTelemetry.GbxElasticTelemetryBlueprintLibrary.SetTelemetryContextPropertyRotator
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGbxElasticTelemetryBlueprintLibrary::SetTelemetryContextPropertyRotator(const class FString& Name_0, const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxElasticTelemetryBlueprintLibrary", "SetTelemetryContextPropertyRotator");

	Params::GbxElasticTelemetryBlueprintLibrary_SetTelemetryContextPropertyRotator Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxElasticTelemetry.GbxElasticTelemetryBlueprintLibrary.SetTelemetryContextPropertyString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxElasticTelemetryBlueprintLibrary::SetTelemetryContextPropertyString(const class FString& Name_0, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxElasticTelemetryBlueprintLibrary", "SetTelemetryContextPropertyString");

	Params::GbxElasticTelemetryBlueprintLibrary_SetTelemetryContextPropertyString Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxElasticTelemetry.GbxElasticTelemetryBlueprintLibrary.SetTelemetryContextPropertyVector
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class FString&                    Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxElasticTelemetryBlueprintLibrary::SetTelemetryContextPropertyVector(const class FString& Name_0, const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxElasticTelemetryBlueprintLibrary", "SetTelemetryContextPropertyVector");

	Params::GbxElasticTelemetryBlueprintLibrary_SetTelemetryContextPropertyVector Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

