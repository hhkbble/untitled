#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxWeatherOcclusion

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class GbxWeatherOcclusion.GbxWeatherOcclusionInfo
// 0x0038 (0x03C8 - 0x0390)
class AGbxWeatherOcclusionInfo final : public AInfo
{
public:
	class UBoxComponent*                          OcclusionInfoBounds;                               // 0x0390(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             OcclusionMap;                                      // 0x0398(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        BakedOcclusionDataScale;                           // 0x03A0(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               OcclusionPlaneMID;                                 // 0x03A8(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   OcclusionPlaneMeshComp;                            // 0x03B0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B8[0x10];                                     // 0x03B8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxWeatherOcclusionInfo")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxWeatherOcclusionInfo")
	}
	static class AGbxWeatherOcclusionInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGbxWeatherOcclusionInfo>();
	}
};
DUMPER7_ASSERTS_AGbxWeatherOcclusionInfo;

// Class GbxWeatherOcclusion.GbxWeatherOcclusionSettings
// 0x00F0 (0x0128 - 0x0038)
class UGbxWeatherOcclusionSettings final : public UDeveloperSettings
{
public:
	bool                                          bUseRVT;                                           // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBakeOcclusionMapAsVirtualTexture;                 // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialParameterCollection> WeatherOcclusionMPC;                          // 0x0040(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class URuntimeVirtualTexture>  WeatherOcclusionRVT;                               // 0x0068(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      OcclusionDataMaterial;                             // 0x0090(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      OcclusionDataMaterial_VT;                          // 0x00B8(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OcclusionMaterialParam;                            // 0x00E0(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OcclusionMaterialParam_VT;                         // 0x00E8(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OcclusionRegionHeightParam;                        // 0x00F0(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OcclusionRegionBaseParam;                          // 0x00F8(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OcclusionDataScaleParam;                           // 0x0100(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OcclusionDataWorldBoundsMinParam;                  // 0x0108(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OcclusionDataWorldExtentParam;                     // 0x0110(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SelfOcclusionPreventionOffset;                     // 0x0118(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        OcclusionMapDataScale;                             // 0x0120(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxWeatherOcclusionSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxWeatherOcclusionSettings")
	}
	static class UGbxWeatherOcclusionSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxWeatherOcclusionSettings>();
	}
};
DUMPER7_ASSERTS_UGbxWeatherOcclusionSettings;

// Class GbxWeatherOcclusion.GbxWeatherOcclusionSubsystem
// 0x01A8 (0x01D8 - 0x0030)
class UGbxWeatherOcclusionSubsystem final : public UWorldSubsystem
{
public:
	class UMaterialParameterCollection*           OcclusionMPC;                                      // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class URuntimeVirtualTexture*                 OcclusionVT;                                       // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ARuntimeVirtualTextureVolume*           OcclusionRVTVolume;                                // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     OcclusionPlaneMaterial;                            // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class AGbxWeatherOcclusionInfo>> RegisteredOcclusionInfo;                  // 0x0050(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_60[0x178];                                     // 0x0060(0x0178)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ReadbackDynamicOcclusionHeightMap(class UNiagaraSystem* InNiagaraSystem, const struct FVector& InOrigin, const struct FVector& InSize);
	void RegisterDynamicOcclusionNS(class UNiagaraSystem* InNiagaraSystem);
	void UnregisterDynamicOcclusionNS(class UNiagaraSystem* InNiagaraSystem);

	bool IsOccluded(const struct FVector& InPosition) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxWeatherOcclusionSubsystem")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxWeatherOcclusionSubsystem")
	}
	static class UGbxWeatherOcclusionSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxWeatherOcclusionSubsystem>();
	}
};
DUMPER7_ASSERTS_UGbxWeatherOcclusionSubsystem;

// Class GbxWeatherOcclusion.GbxWeatherOcclusionVolume
// 0x0000 (0x03C8 - 0x03C8)
class AGbxWeatherOcclusionVolume final : public AVolume
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxWeatherOcclusionVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxWeatherOcclusionVolume")
	}
	static class AGbxWeatherOcclusionVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGbxWeatherOcclusionVolume>();
	}
};
DUMPER7_ASSERTS_AGbxWeatherOcclusionVolume;

}

