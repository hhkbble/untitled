#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxEngine

#include "Basic.hpp"

#include "GbxEngine_structs.hpp"
#include "GbxNexus_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "GbxCore_structs.hpp"
#include "GbxPhysics_structs.hpp"


namespace SDK
{

// Class GbxEngine.MapFunctionalTests
// 0x0028 (0x0050 - 0x0028)
class UMapFunctionalTests final : public UObject
{
public:
	bool                                          CookFunctionalTestsInBaseGame;                     // 0x0028(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         CookFunctionalTestsInDLC;                          // 0x0030(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FMapFunctionalTest>             MapFunctionalTests;                                // 0x0040(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("MapFunctionalTests")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"MapFunctionalTests")
	}
	static class UMapFunctionalTests* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapFunctionalTests>();
	}
};
DUMPER7_ASSERTS_UMapFunctionalTests;

// Class GbxEngine.GbxAnimNotify_SetActorState
// 0x0018 (0x0050 - 0x0038)
class UGbxAnimNotify_SetActorState final : public UAnimNotify
{
public:
	struct FGbxActorStateMachineKey               StateMachine;                                      // 0x0038(0x000C)(Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxActorStateMachineStateKey          State;                                             // 0x0044(0x000C)(Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxAnimNotify_SetActorState")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxAnimNotify_SetActorState")
	}
	static class UGbxAnimNotify_SetActorState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxAnimNotify_SetActorState>();
	}
};
DUMPER7_ASSERTS_UGbxAnimNotify_SetActorState;

// Class GbxEngine.GbxSceneComponentResolver
// 0x0000 (0x0028 - 0x0028)
class UGbxSceneComponentResolver : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxSceneComponentResolver")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxSceneComponentResolver")
	}
	static class UGbxSceneComponentResolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxSceneComponentResolver>();
	}
};
DUMPER7_ASSERTS_UGbxSceneComponentResolver;

// Class GbxEngine.GbxSceneComponentResolver_RootComponent
// 0x0000 (0x0028 - 0x0028)
class UGbxSceneComponentResolver_RootComponent final : public UGbxSceneComponentResolver
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxSceneComponentResolver_RootComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxSceneComponentResolver_RootComponent")
	}
	static class UGbxSceneComponentResolver_RootComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxSceneComponentResolver_RootComponent>();
	}
};
DUMPER7_ASSERTS_UGbxSceneComponentResolver_RootComponent;

// Class GbxEngine.NexusConfigStoreBasicDefFlat
// 0x00B0 (0x0380 - 0x02D0)
class UNexusConfigStoreBasicDefFlat : public UNexusConfigStoreFlat
{
public:
	uint8                                         Pad_2D0[0xB0];                                     // 0x02D0(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NexusConfigStoreBasicDefFlat")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NexusConfigStoreBasicDefFlat")
	}
	static class UNexusConfigStoreBasicDefFlat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNexusConfigStoreBasicDefFlat>();
	}
};
DUMPER7_ASSERTS_UNexusConfigStoreBasicDefFlat;

// Class GbxEngine.GbxSceneComponentResolver_SkeletalMesh
// 0x0000 (0x0028 - 0x0028)
class UGbxSceneComponentResolver_SkeletalMesh final : public UGbxSceneComponentResolver
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxSceneComponentResolver_SkeletalMesh")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxSceneComponentResolver_SkeletalMesh")
	}
	static class UGbxSceneComponentResolver_SkeletalMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxSceneComponentResolver_SkeletalMesh>();
	}
};
DUMPER7_ASSERTS_UGbxSceneComponentResolver_SkeletalMesh;

// Class GbxEngine.NexusConfigStoreDeveloperSettings
// 0x0000 (0x0380 - 0x0380)
class UNexusConfigStoreDeveloperSettings final : public UNexusConfigStoreBasicDefFlat
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NexusConfigStoreDeveloperSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NexusConfigStoreDeveloperSettings")
	}
	static class UNexusConfigStoreDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNexusConfigStoreDeveloperSettings>();
	}
};
DUMPER7_ASSERTS_UNexusConfigStoreDeveloperSettings;

// Class GbxEngine.GbxScript
// 0x0000 (0x0028 - 0x0028)
class UGbxScript : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxScript")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxScript")
	}
	static class UGbxScript* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxScript>();
	}
};
DUMPER7_ASSERTS_UGbxScript;

// Class GbxEngine.GbxActorStateSchemaSourceProvider
// 0x0000 (0x0000 - 0x0000)
class IGbxActorStateSchemaSourceProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxActorStateSchemaSourceProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxActorStateSchemaSourceProvider")
	}
	static class IGbxActorStateSchemaSourceProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxActorStateSchemaSourceProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGbxActorStateSchemaSourceProvider;

// Class GbxEngine.GbxActorStateOwner
// 0x0000 (0x0000 - 0x0000)
class IGbxActorStateOwner final
{
public:
	void OnActorStateChangedBP(const struct FGbxActorStateMachineKey& StateMachine, const struct FGbxActorStateMachineStateKey& NewState, const struct FGbxActorStateMachineStateKey& PreviousState);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxActorStateOwner")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxActorStateOwner")
	}
	static class IGbxActorStateOwner* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxActorStateOwner>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGbxActorStateOwner;

// Class GbxEngine.GbxActorStateBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxActorStateBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 Conv_GbxActorStateMachineKey_Index(const struct FGbxActorStateMachineKey& StateMachine);
	static class FName Conv_GbxActorStateMachineKey_Name(const struct FGbxActorStateMachineKey& StateMachine);
	static class FString Conv_GbxActorStateMachineKey_String(const struct FGbxActorStateMachineKey& StateMachine);
	static bool Conv_GbxActorStateMachineStateKey_Bool(const struct FGbxActorStateMachineStateKey& State);
	static int32 Conv_GbxActorStateMachineStateKey_Index(const struct FGbxActorStateMachineStateKey& State);
	static class FName Conv_GbxActorStateMachineStateKey_Name(const struct FGbxActorStateMachineStateKey& State);
	static class FString Conv_GbxActorStateMachineStateKey_String(const struct FGbxActorStateMachineStateKey& State);
	static struct FGbxActorStateMachineKey Conv_Name_GbxActorStateMachineKey(class FName Name_0);
	static struct FGbxActorStateMachineStateKey Conv_Name_GbxActorStateMachineStateKey(class FName Name_0);
	static struct FGbxActorStateMachineStateKey GetActorState(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine);
	static bool GetActorStateAsBool(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine);
	static int32 GetActorStateAsInt(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine);
	static TArray<struct FGbxActorStateMachineKey> GetActorStateMachines(class UObject* OwnerContext);
	static TArray<struct FGbxActorStateMachineStateKey> GetActorStateMachineStates(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine);
	static class FName GetActorStateValue(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateName);
	static float GetTimeSinceStateChanged(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine);
	static bool IsInActorState(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine, struct FGbxActorStateMachineStateKey& State);
	static bool SetActorState(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine, struct FGbxActorStateMachineStateKey& State);
	static bool SetActorStateAsBool(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine, bool State);
	static void SetActorStateDefaultOverride(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine, struct FGbxActorStateMachineStateKey& State);
	static bool SetActorStateValue(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateName, struct FGbxActorStateMachineStateKey& StateValue);
	static struct FGbxActorStateMachineStateKey SetNextActorState(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine);
	static bool ToggleActorState(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxActorStateBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxActorStateBlueprintLibrary")
	}
	static class UGbxActorStateBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxActorStateBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UGbxActorStateBlueprintLibrary;

// Class GbxEngine.GbxWorldSettings
// 0x0088 (0x0648 - 0x05C0)
class AGbxWorldSettings : public AWorldSettings
{
public:
	struct FGbxInlineStruct                       AutoSaveInformations;                              // 0x05C0(0x0018)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsSimpleTransitionMap;                            // 0x05D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D9[0x3];                                      // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	EEnforceWorldPartitionUsageMode               EnforceLIMapsWorldPartitionUsage;                  // 0x05DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGbxLoadingRangeOverrideDataArray> LoadingRangeOverrideData;            // 0x05E0(0x0050)(Edit, Config, NativeAccessSpecifierPublic)
	EGenerateMapYamlBehavior                      GenerateMapYamlBehavior;                           // 0x0630(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipActorDefApplicationDuringCook;                // 0x0631(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsActivityStampModel;                             // 0x0632(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_633[0x1];                                      // 0x0633(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumManagedMovingPlatformTickGroups;                // 0x0634(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAutoManagedMovingPlatforms;                 // 0x0638(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_639[0x3];                                      // 0x0639(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoManagedMovingPlatformsRelevancyDistance;       // 0x063C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_640[0x8];                                      // 0x0640(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxWorldSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxWorldSettings")
	}
	static class AGbxWorldSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGbxWorldSettings>();
	}
};
DUMPER7_ASSERTS_AGbxWorldSettings;

// Class GbxEngine.GbxActorStateSchemaProvider
// 0x0000 (0x0000 - 0x0000)
class IGbxActorStateSchemaProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxActorStateSchemaProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxActorStateSchemaProvider")
	}
	static class IGbxActorStateSchemaProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxActorStateSchemaProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGbxActorStateSchemaProvider;

// Class GbxEngine.GbxActorWithDef
// 0x0000 (0x0000 - 0x0000)
class IGbxActorWithDef final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxActorWithDef")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxActorWithDef")
	}
	static class IGbxActorWithDef* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxActorWithDef>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGbxActorWithDef;

// Class GbxEngine.NexusConfigStoreBasic
// 0x00C0 (0x0390 - 0x02D0)
class UNexusConfigStoreBasic : public UNexusConfigStoreFlat
{
public:
	TSoftObjectPtr<class UScriptStruct>           RootType;                                          // 0x02D0(0x0028)(Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UScriptStruct>           DefaultType;                                       // 0x02F8(0x0028)(Config, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_320[0x70];                                     // 0x0320(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NexusConfigStoreBasic")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NexusConfigStoreBasic")
	}
	static class UNexusConfigStoreBasic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNexusConfigStoreBasic>();
	}
};
DUMPER7_ASSERTS_UNexusConfigStoreBasic;

// Class GbxEngine.NexusConfigStoreAttributeDefs
// 0x0000 (0x0390 - 0x0390)
class UNexusConfigStoreAttributeDefs final : public UNexusConfigStoreBasic
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NexusConfigStoreAttributeDefs")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NexusConfigStoreAttributeDefs")
	}
	static class UNexusConfigStoreAttributeDefs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNexusConfigStoreAttributeDefs>();
	}
};
DUMPER7_ASSERTS_UNexusConfigStoreAttributeDefs;

// Class GbxEngine.GbxAnimSet
// 0x0050 (0x0080 - 0x0030)
class UGbxAnimSet final : public UDataAsset
{
public:
	TMap<struct FGameplayTag, struct FGbxAnimSetValue> AssetMap;                                     // 0x0030(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxAnimSet")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxAnimSet")
	}
	static class UGbxAnimSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxAnimSet>();
	}
};
DUMPER7_ASSERTS_UGbxAnimSet;

// Class GbxEngine.NexusConfigStoreDefSelectors
// 0x0020 (0x0360 - 0x0340)
class UNexusConfigStoreDefSelectors final : public UNexusConfigStorePath
{
public:
	uint8                                         Pad_340[0x20];                                     // 0x0340(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NexusConfigStoreDefSelectors")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NexusConfigStoreDefSelectors")
	}
	static class UNexusConfigStoreDefSelectors* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNexusConfigStoreDefSelectors>();
	}
};
DUMPER7_ASSERTS_UNexusConfigStoreDefSelectors;

// Class GbxEngine.GbxAnimSetPickerBase
// 0x0000 (0x0030 - 0x0030)
class UGbxAnimSetPickerBase : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxAnimSetPickerBase")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxAnimSetPickerBase")
	}
	static class UGbxAnimSetPickerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxAnimSetPickerBase>();
	}
};
DUMPER7_ASSERTS_UGbxAnimSetPickerBase;

// Class GbxEngine.NexusConfigStoreGbxUEDataTableDefs
// 0x0010 (0x03A0 - 0x0390)
class UNexusConfigStoreGbxUEDataTableDefs final : public UNexusConfigStoreBasic
{
public:
	uint8                                         Pad_390[0x10];                                     // 0x0390(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NexusConfigStoreGbxUEDataTableDefs")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NexusConfigStoreGbxUEDataTableDefs")
	}
	static class UNexusConfigStoreGbxUEDataTableDefs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNexusConfigStoreGbxUEDataTableDefs>();
	}
};
DUMPER7_ASSERTS_UNexusConfigStoreGbxUEDataTableDefs;

// Class GbxEngine.GbxAnimSetProvider
// 0x0000 (0x0000 - 0x0000)
class IGbxAnimSetProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxAnimSetProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxAnimSetProvider")
	}
	static class IGbxAnimSetProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxAnimSetProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGbxAnimSetProvider;

// Class GbxEngine.SharedClothData
// 0x0010 (0x0040 - 0x0030)
class USharedClothData final : public UDataAsset
{
public:
	TArray<class UClothingAssetBase*>             ClothingAssets;                                    // 0x0030(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SharedClothData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SharedClothData")
	}
	static class USharedClothData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USharedClothData>();
	}
};
DUMPER7_ASSERTS_USharedClothData;

// Class GbxEngine.GbxAssetManager
// 0x00D0 (0x0648 - 0x0578)
class UGbxAssetManager : public UGbxBaseAssetManager
{
public:
	uint8                                         Pad_578[0xD0];                                     // 0x0578(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxAssetManager")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxAssetManager")
	}
	static class UGbxAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxAssetManager>();
	}
};
DUMPER7_ASSERTS_UGbxAssetManager;

// Class GbxEngine.GbxAssetManagerBlueprintFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxAssetManagerBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void PurgeWeakAssetCache();
	static void PurgeWeakAssetCacheForOwningLevel(class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxAssetManagerBlueprintFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxAssetManagerBlueprintFunctionLibrary")
	}
	static class UGbxAssetManagerBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxAssetManagerBlueprintFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UGbxAssetManagerBlueprintFunctionLibrary;

// Class GbxEngine.GbxAttributeBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxAttributeBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FGbxAttributeModifierHandle AddModifierToGbxAttribute(const FGbxDefPtrProperty_& attribute, class UObject* ContextSource, EGbxAttributeModifierType ModifierType, float modifiervalue, bool bAutoRefresh, EGbxAttributeModifierActionExecOutput* ModifierActionResult);
	static struct FGbxAttributeDelegateBindingHandle BindEventToOnAttributeChanged(class FName AttributeDef, class UObject* ContextSource, const TDelegate<void(float OldValue, float NewValue)>& Delegate);
	static void BindEventToOnFloatAttributeChanged(struct FGbxAttributeFloat& attribute, TDelegate<void(float OldValue, float NewValue)> Delegate);
	static void BindEventToOnIntegerAttributeChanged(struct FGbxAttributeInteger& attribute, TDelegate<void(float OldValue, float NewValue)> Delegate);
	static void BreakGbxAttributeFloat(const struct FGbxAttributeFloat& attribute, float* Value, float* BaseValue);
	static void BreakGbxAttributeInteger(const struct FGbxAttributeInteger& attribute, int32* Value, int32* BaseValue);
	static float Conv_GbxAttributeFloatToFloat(const struct FGbxAttributeFloat& attribute);
	static class FString Conv_GbxAttributeFloatToString(const struct FGbxAttributeFloat& attribute);
	static int32 Conv_GbxAttributeIntegerToInteger(const struct FGbxAttributeInteger& attribute);
	static class FString Conv_GbxAttributeIntegerToString(const struct FGbxAttributeInteger& attribute);
	static class FString Conv_GbxAttributeModifierHandleToString(const struct FGbxAttributeModifierHandle& attribute);
	static bool EqualEqual_GbxAttributeFloat(const struct FGbxAttributeFloat& A, const struct FGbxAttributeFloat& B);
	static bool EqualEqual_GbxAttributeFloatValue(const struct FGbxAttributeFloat& A, float B);
	static bool EqualEqual_GbxAttributeInteger(const struct FGbxAttributeInteger& A, const struct FGbxAttributeInteger& B);
	static bool EqualEqual_GbxAttributeIntegerValue(const struct FGbxAttributeInteger& A, int32 B);
	static class AActor* GetAttributeAsActor(FGameDataHandleProperty_& attribute, class UObject* ContextSource, TSubclassOf<class AActor> Class_0, class AActor* DefaultValue);
	static bool GetAttributeAsBool(FGameDataHandleProperty_& attribute, class UObject* ContextSource, bool DefaultValue);
	static float GetAttributeAsFloat(FGameDataHandleProperty_& attribute, class UObject* ContextSource, float DefaultValue);
	static int32 GetAttributeAsInt(FGameDataHandleProperty_& attribute, class UObject* ContextSource, int32 DefaultValue);
	static void GetAttributeAsNumericRange(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FNumericRange& DefaultValue, struct FNumericRange* ReturnValue);
	static class UObject* GetAttributeAsObject(FGameDataHandleProperty_& attribute, class UObject* ContextSource, class UClass* Class_0, class UObject* DefaultValue);
	static struct FRotator GetAttributeAsRotator(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FRotator& DefaultValue);
	static struct FVector GetAttributeAsVector(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FVector& DefaultValue);
	static class FString GetSummary_GbxAttributeInit(const struct FGbxAttributeInit& Init);
	static class FString GetSummary_GbxWeightedAttributeInit(const struct FGbxWeightedAttributeInit& Init);
	static float GetValueOfAttribute(class FName AttributeDef, class UObject* ContextSource, float DefaultValue);
	static bool GetValueOfAttributeAsBoolean(class FName AttributeDef, class UObject* ContextSource, bool DefaultValue);
	static int32 GetValueOfAttributeAsInteger(class FName AttributeDef, class UObject* ContextSource, int32 DefaultValue);
	static struct FGbxAttributeFloat MakeGbxAttributeFloat(float BaseValue);
	static struct FGbxAttributeInteger MakeGbxAttributeInteger(int32 BaseValue);
	static struct FGbxAttributeDelegateBindingHandle RefreshBindingToOnAttributeChangedEvent(const struct FGbxAttributeDelegateBindingHandle& BindingHandle, class UObject* ContextSource);
	static bool RemoveAttributeModifier(struct FGbxAttributeModifierHandle& ModifierHandle);
	static void RemoveModifierFromGbxAttribute(struct FGbxAttributeModifierHandle& ModifierHandle, EGbxAttributeModifierActionExecOutput* ModifierActionResult);
	static void RemoveMultipleAttributeModifiers(TArray<struct FGbxAttributeModifierHandle>& ModifierHandles);
	static void ResetAttributeBaseValue(FGameDataHandleProperty_& attribute, class UObject* ContextSource);
	static void SetAttributeByPercentage(class UObject* ContextSource, FGameDataHandleProperty_& attribute, FGameDataHandleProperty_& MaxAttribute, float Percentage, float MaxPercentage);
	static void SetAttributeToActor(FGameDataHandleProperty_& attribute, class UObject* ContextSource, class AActor* Value);
	static void SetAttributeToBool(FGameDataHandleProperty_& attribute, class UObject* ContextSource, bool Value);
	static void SetAttributeToFloat(FGameDataHandleProperty_& attribute, class UObject* ContextSource, float Value);
	static void SetAttributeToInt(FGameDataHandleProperty_& attribute, class UObject* ContextSource, int32 Value);
	static void SetAttributeToNumericRange(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FNumericRange& Value);
	static void SetAttributeToObject(FGameDataHandleProperty_& attribute, class UObject* ContextSource, class UObject* Value);
	static void SetAttributeToRotator(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FRotator& Value);
	static void SetAttributeToVector(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FVector& Value);
	static void UnbindAllEventsFromOnFloatAttributeChanged(struct FGbxAttributeFloat& attribute);
	static void UnbindAllEventsFromOnIntegerAttributeChanged(struct FGbxAttributeInteger& attribute);
	static void UnbindEventFromOnFloatAttributeChanged(struct FGbxAttributeFloat& attribute, const TDelegate<void(float OldValue, float NewValue)>& Delegate);
	static void UnbindEventFromOnIntegerAttributeChanged(struct FGbxAttributeInteger& attribute, const TDelegate<void(float OldValue, float NewValue)>& Delegate);
	static void UnbindFromOnAttributeChanged(const struct FGbxAttributeDelegateBindingHandle& BindingHandle);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxAttributeBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxAttributeBlueprintLibrary")
	}
	static class UGbxAttributeBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxAttributeBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UGbxAttributeBlueprintLibrary;

// Class GbxEngine.GbxAutomationBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxAutomationBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SimulateAxisInput(class APlayerController* PlayerController, const struct FKey& Axis, float Amount);
	static void SimulateButtonInput(class APlayerController* PlayerController, const struct FKey& Key, EInputEvent Event);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxAutomationBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxAutomationBlueprintLibrary")
	}
	static class UGbxAutomationBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxAutomationBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UGbxAutomationBlueprintLibrary;

// Class GbxEngine.GbxBlackboardBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxBlackboardBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ClearBlackboardValue(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext);
	static class FName Conv_BlackboardEntryRef_Name(const struct FGbxBlackboardEntryRef& BlackboardKey);
	static class FString Conv_BlackboardEntryRef_String(const struct FGbxBlackboardEntryRef& BlackboardKey);
	static bool EqualEqual_GbxBlackboardEntryRef(const struct FGbxBlackboardEntryRef& A, const struct FGbxBlackboardEntryRef& B);
	static class AActor* GetBlackboardActor(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, TSubclassOf<class AActor> Class_0, bool bReportIfMissing);
	static class AActor* GetBlackboardActorPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, TSubclassOf<class AActor> Class_0, bool bReportIfMissing);
	static TSoftObjectPtr<class UObject> GetBlackboardAsset(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static TSoftObjectPtr<class UObject> GetBlackboardAssetPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static bool GetBlackboardBool(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static bool GetBlackboardBoolPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static double GetBlackboardDouble(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static double GetBlackboardDoublePure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static float GetBlackboardFloat(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static float GetBlackboardFloatPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static FGbxDefPtrProperty_ GetBlackboardGbxDef(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static FGbxDefPtrProperty_ GetBlackboardGbxDefPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static void GetBlackboardHitResult(const struct FGbxBlackboardEntryRef& BlackboardKey, struct FHitResult* HitResult, class UObject* OwnerContext, bool bReportIfMissing);
	static void GetBlackboardHitResultPure(const struct FGbxBlackboardEntryRef& BlackboardKey, struct FHitResult* HitResult, class UObject* OwnerContext, bool bReportIfMissing);
	static int32 GetBlackboardInt(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static int32 GetBlackboardIntPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static class FName GetBlackboardName(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static class FName GetBlackboardNamePure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static void GetBlackboardNumericRange(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, struct FNumericRange* ReturnValue, bool bReportIfMissing);
	static void GetBlackboardNumericRangePure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, struct FNumericRange* ReturnValue, bool bReportIfMissing);
	static class UObject* GetBlackboardObject(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, class UClass* Class_0, bool bReportIfMissing);
	static class UObject* GetBlackboardObjectPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, class UClass* Class_0, bool bReportIfMissing);
	static struct FGbxParam GetBlackboardParam(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static struct FGbxParam GetBlackboardParamPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static struct FRotator GetBlackboardRotator(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static struct FRotator GetBlackboardRotatorPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static class USceneComponent* GetBlackboardSceneComponent(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, TSubclassOf<class USceneComponent> Class_0, bool bReportIfMissing);
	static class USceneComponent* GetBlackboardSceneComponentPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, TSubclassOf<class USceneComponent> Class_0, bool bReportIfMissing);
	static class FString GetBlackboardString(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static class FString GetBlackboardStringPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static class FText GetBlackboardText(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static class FText GetBlackboardTextPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static struct FVector GetBlackboardVector(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static struct FVector GetBlackboardVectorPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing);
	static bool NotEqual_GbxBlackboardEntryRef(const struct FGbxBlackboardEntryRef& A, const struct FGbxBlackboardEntryRef& B);
	static void SetBlackboardActor(const struct FGbxBlackboardEntryRef& BlackboardKey, class AActor* Value, class UObject* OwnerContext);
	static void SetBlackboardAsset(const struct FGbxBlackboardEntryRef& BlackboardKey, TSoftObjectPtr<class UObject> Value, class UObject* OwnerContext);
	static void SetBlackboardBool(const struct FGbxBlackboardEntryRef& BlackboardKey, bool Value, class UObject* OwnerContext);
	static void SetBlackboardDouble(const struct FGbxBlackboardEntryRef& BlackboardKey, double Value, class UObject* OwnerContext);
	static void SetBlackboardFloat(const struct FGbxBlackboardEntryRef& BlackboardKey, float Value, class UObject* OwnerContext);
	static void SetBlackboardFromDataTable(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FDataTableValueHandle& Value, class UObject* OwnerContext);
	static void SetBlackboardGbxDef(const struct FGbxBlackboardEntryRef& BlackboardKey, FGbxDefPtrProperty_ Value, class UObject* OwnerContext);
	static void SetBlackboardHitResult(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FHitResult& Value, class UObject* OwnerContext);
	static void SetBlackboardInt(const struct FGbxBlackboardEntryRef& BlackboardKey, int32 Value, class UObject* OwnerContext);
	static void SetBlackboardName(const struct FGbxBlackboardEntryRef& BlackboardKey, class FName Value, class UObject* OwnerContext);
	static void SetBlackboardNumericRange(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FNumericRange& Value, class UObject* OwnerContext);
	static void SetBlackboardObject(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* Value, class UObject* OwnerContext);
	static void SetBlackboardParam(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FGbxParam& Value, class UObject* OwnerContext);
	static void SetBlackboardRotator(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FRotator& Value, class UObject* OwnerContext);
	static void SetBlackboardSceneComponent(const struct FGbxBlackboardEntryRef& BlackboardKey, class USceneComponent* Value, class UObject* OwnerContext);
	static void SetBlackboardString(const struct FGbxBlackboardEntryRef& BlackboardKey, const class FString& Value, class UObject* OwnerContext);
	static void SetBlackboardText(const struct FGbxBlackboardEntryRef& BlackboardKey, const class FText& Value, class UObject* OwnerContext);
	static void SetBlackboardVector(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FVector& Value, class UObject* OwnerContext);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxBlackboardBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxBlackboardBlueprintLibrary")
	}
	static class UGbxBlackboardBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxBlackboardBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UGbxBlackboardBlueprintLibrary;

// Class GbxEngine.SeparatedGestaltSkeletalMeshPart
// 0x0080 (0x0608 - 0x0588)
class USeparatedGestaltSkeletalMeshPart final : public UGbxSkeletalMesh
{
public:
	uint8                                         Pad_588[0x8];                                      // 0x0588(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0590(0x0020)(Edit, NativeAccessSpecifierPrivate)
	class USharedClothData*                       SharedClothData;                                   // 0x05B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, struct FForwardDynamicsSettings> ForwardDynamics;                      // 0x05B8(0x0050)(Edit, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("SeparatedGestaltSkeletalMeshPart")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"SeparatedGestaltSkeletalMeshPart")
	}
	static class USeparatedGestaltSkeletalMeshPart* GetDefaultObj()
	{
		return GetDefaultObjImpl<USeparatedGestaltSkeletalMeshPart>();
	}
};
DUMPER7_ASSERTS_USeparatedGestaltSkeletalMeshPart;

// Class GbxEngine.GbxBlackboardDefaultsProvider
// 0x0000 (0x0000 - 0x0000)
class IGbxBlackboardDefaultsProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxBlackboardDefaultsProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxBlackboardDefaultsProvider")
	}
	static class IGbxBlackboardDefaultsProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxBlackboardDefaultsProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGbxBlackboardDefaultsProvider;

// Class GbxEngine.TrajectoryBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UTrajectoryBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FTrajectoryOptions MakeTrajectoryOptions(float MaxPrediction, float speed, float AnglePercent, const struct FRotator& DirectionOffset, const struct FVector& LocalTargetOffset, bool bOverrideGravity, float Gravity);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TrajectoryBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TrajectoryBlueprintLibrary")
	}
	static class UTrajectoryBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTrajectoryBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UTrajectoryBlueprintLibrary;

// Class GbxEngine.GbxBlackboardOwner
// 0x0000 (0x0000 - 0x0000)
class IGbxBlackboardOwner final
{
public:
	void OnBlackboardChangedBP(const struct FGbxBlackboardEntryRef& Entry);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxBlackboardOwner")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxBlackboardOwner")
	}
	static class IGbxBlackboardOwner* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxBlackboardOwner>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGbxBlackboardOwner;

// Class GbxEngine.GbxBookmarkUtils
// 0x0000 (0x0028 - 0x0028)
class UGbxBookmarkUtils final : public UBlueprintFunctionLibrary
{
public:
	static void EmitBookmarkWithValue(const class UObject* WorldContextObject, class FName Tag, const class FString& Value);
	static void EmitBookmarkWithValueAndLoc(const class UObject* WorldContextObject, class FName Tag, const class FString& Value, const struct FVector& loc);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxBookmarkUtils")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxBookmarkUtils")
	}
	static class UGbxBookmarkUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxBookmarkUtils>();
	}
};
DUMPER7_ASSERTS_UGbxBookmarkUtils;

// Class GbxEngine.GbxCollisionStateInterface
// 0x0000 (0x0000 - 0x0000)
class IGbxCollisionStateInterface final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxCollisionStateInterface")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxCollisionStateInterface")
	}
	static class IGbxCollisionStateInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxCollisionStateInterface>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGbxCollisionStateInterface;

// Class GbxEngine.GbxConstructContentProvider
// 0x0000 (0x0000 - 0x0000)
class IGbxConstructContentProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxConstructContentProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxConstructContentProvider")
	}
	static class IGbxConstructContentProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxConstructContentProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGbxConstructContentProvider;

// Class GbxEngine.GbxConstructEditorNexusObject
// 0x0018 (0x0070 - 0x0058)
class UGbxConstructEditorNexusObject final : public UGenericNexusEditorObject
{
public:
	TArray<class FName>                           PreviewMapDirs;                                    // 0x0058(0x0010)(ZeroConstructor, Config, NativeAccessSpecifierPublic)
	class FName                                   PreviewMapPackagePath;                             // 0x0068(0x0008)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxConstructEditorNexusObject")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxConstructEditorNexusObject")
	}
	static class UGbxConstructEditorNexusObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxConstructEditorNexusObject>();
	}
};
DUMPER7_ASSERTS_UGbxConstructEditorNexusObject;

// Class GbxEngine.GbxDataTableFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxDataTableFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_DataTableValueHandleToString(const struct FDataTableValueHandle& ValueHandle);
	static struct FGbxParam GetDataTableValueFromHandle(const struct FDataTableValueHandle& ValueHandle, class UObject* ContextSource);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxDataTableFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxDataTableFunctionLibrary")
	}
	static class UGbxDataTableFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxDataTableFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UGbxDataTableFunctionLibrary;

// Class GbxEngine.TestConfigStore_IntegrationTest_Cook
// 0x0000 (0x0380 - 0x0380)
class UTestConfigStore_IntegrationTest_Cook final : public UNexusConfigStoreBasicDefFlat
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TestConfigStore_IntegrationTest_Cook")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TestConfigStore_IntegrationTest_Cook")
	}
	static class UTestConfigStore_IntegrationTest_Cook* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestConfigStore_IntegrationTest_Cook>();
	}
};
DUMPER7_ASSERTS_UTestConfigStore_IntegrationTest_Cook;

// Class GbxEngine.GbxDirectionNodeSettings
// 0x0010 (0x0040 - 0x0030)
class UGbxDirectionNodeSettings final : public UDataAsset
{
public:
	TArray<struct FGbxDirectionNodePin>           PinSettings;                                       // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxDirectionNodeSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxDirectionNodeSettings")
	}
	static class UGbxDirectionNodeSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxDirectionNodeSettings>();
	}
};
DUMPER7_ASSERTS_UGbxDirectionNodeSettings;

// Class GbxEngine.GbxEngineAnimInstance
// 0x0120 (0x0560 - 0x0440)
#pragma pack(push, 0x1)
class alignas(0x10) UGbxEngineAnimInstance : public UAnimInstance
{
public:
	uint8                                         Pad_438[0xA0];                                     // 0x0438(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<FGameDataHandleProperty_>              AttributeProperties;                               // 0x04D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TSubclassOf<class UObject>                    GeneratedClass;                                    // 0x04E8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F0[0x28];                                     // 0x04F0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UAnimNotify>>        AllowedNotifies;                                   // 0x0518(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UAnimNotifyState>>   AllowedNotifyStates;                               // 0x0528(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UAnimNotify>>        IgnoredNotifies;                                   // 0x0538(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UAnimNotifyState>>   IgnoredNotifyStates;                               // 0x0548(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void OnAnimAssetsLoaded();

	bool GbxAllSlotsActive(const TArray<class FName>& SlotNames) const;
	bool GbxAnySlotActive(const TArray<class FName>& SlotNames) const;
	bool GbxIsSlotActive(class FName SlotName) const;
	bool GetIsAnimSetTagValid(const struct FGameplayTag& GameplayTag) const;
	float GetSlotWeight(class FName SlotName) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxEngineAnimInstance")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxEngineAnimInstance")
	}
	static class UGbxEngineAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxEngineAnimInstance>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_UGbxEngineAnimInstance;

// Class GbxEngine.GbxEngineBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxEngineBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FName Conv_BoolToName(bool InBool);
	static void FlushNexusLayers();
	static struct FTransform GetStaticMeshSocketTransform(class UStaticMesh* Mesh, class FName SocketName);
	static void LoadNexusContentForActor(class UObject* WorldContext, const struct FLatentActionInfo& LatentInfo, class AActor* Actor);
	static TScriptInterface<class IInterface> ScriptQueryInterface(class UObject* Object, TSubclassOf<class IInterface> InterfaceClass, EQueryInterfaceExec* Exec);
	static void SetGameplayDebuggerActor(class AActor* Actor);
	static void SetGameplayDebuggerCategory(class UObject* WorldContext, class FName categoryname, bool bEnabled);
	static void SetNexusLayerEnabled(class FName LayerName, bool bEnabled, bool bFlush);
	static void WaitForActorBeginPlay(class AActor* Actor, const struct FLatentActionInfo& LatentInfo, class AActor** OutActor);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxEngineBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxEngineBlueprintLibrary")
	}
	static class UGbxEngineBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxEngineBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UGbxEngineBlueprintLibrary;

// Class GbxEngine.GbxEngineCharacter
// 0x00D0 (0x0820 - 0x0750)
#pragma pack(push, 0x1)
class alignas(0x10) AGbxEngineCharacter : public ACharacter
{
public:
	uint8                                         Pad_750[0x8];                                      // 0x0750(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGbxEngineCharacterMovementComponent*   GbxEngineMovement;                                 // 0x0758(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_760[0xB8];                                     // 0x0760(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxEngineCharacter")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxEngineCharacter")
	}
	static class AGbxEngineCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGbxEngineCharacter>();
	}
};
#pragma pack(pop)
DUMPER7_ASSERTS_AGbxEngineCharacter;

// Class GbxEngine.GbxEngineCharacterMovementComponent
// 0x0160 (0x11C0 - 0x1060)
class UGbxEngineCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	uint8                                         Pad_1060[0x50];                                    // 0x1060(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class AGbxEngineCharacter*                    GbxEngineCharacterOwner;                           // 0x10B0(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimInstance*                          CachedAnimInstance;                                // 0x10B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10C0[0x100];                                   // 0x10C0(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxEngineCharacterMovementComponent")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxEngineCharacterMovementComponent")
	}
	static class UGbxEngineCharacterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxEngineCharacterMovementComponent>();
	}
};
DUMPER7_ASSERTS_UGbxEngineCharacterMovementComponent;

// Class GbxEngine.GbxEngineTestActor
// 0x0068 (0x0400 - 0x0398)
class AGbxEngineTestActor : public ATriggerSphere
{
public:
	TMulticastInlineDelegate<void()>              OnTestStarted;                                     // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTestStopped;                                     // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UTextRenderComponent*                   TextComponent;                                     // 0x03B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 TestName;                                          // 0x03C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FailTime;                                          // 0x03D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsActive;                                         // 0x03D4(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bExpectedToFail;                                   // 0x03D5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D6[0x2A];                                     // 0x03D6(0x002A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_IsActive();
	void SetFailed();
	void SetSucceeded();
	void Start();

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxEngineTestActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxEngineTestActor")
	}
	static class AGbxEngineTestActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGbxEngineTestActor>();
	}
};
DUMPER7_ASSERTS_AGbxEngineTestActor;

// Class GbxEngine.GbxFolderHolderAsset
// 0x0000 (0x0028 - 0x0028)
class UGbxFolderHolderAsset final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxFolderHolderAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxFolderHolderAsset")
	}
	static class UGbxFolderHolderAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxFolderHolderAsset>();
	}
};
DUMPER7_ASSERTS_UGbxFolderHolderAsset;

// Class GbxEngine.GbxGameplayDebuggerDataProvider
// 0x0000 (0x0000 - 0x0000)
class IGbxGameplayDebuggerDataProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxGameplayDebuggerDataProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxGameplayDebuggerDataProvider")
	}
	static class IGbxGameplayDebuggerDataProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxGameplayDebuggerDataProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGbxGameplayDebuggerDataProvider;

// Class GbxEngine.GbxGraphAsset
// 0x0028 (0x0050 - 0x0028)
class UGbxGraphAsset : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UScriptStruct*>                  NodeSettingsTypes;                                 // 0x0040(0x0010)(ZeroConstructor, Deprecated, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxGraphAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxGraphAsset")
	}
	static class UGbxGraphAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxGraphAsset>();
	}
};
DUMPER7_ASSERTS_UGbxGraphAsset;

// Class GbxEngine.GbxGraphFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxGraphFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BreakGbxGraphParam(const struct FGbxGraphParam& GraphParam, class FName* Name_0, struct FGbxParam* Param);
	static struct FGbxGraphParam MakeGbxGraphParam(const class FName& Name_0, const struct FGbxParam& Param);
	static struct FGbxGraphParam MakeGbxGraphParamFromString(const class FName& Name_0, const class FString& Param);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxGraphFunctionLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxGraphFunctionLibrary")
	}
	static class UGbxGraphFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxGraphFunctionLibrary>();
	}
};
DUMPER7_ASSERTS_UGbxGraphFunctionLibrary;

// Class GbxEngine.GbxGraphNodeSettingsProvider
// 0x0000 (0x0000 - 0x0000)
class IGbxGraphNodeSettingsProvider final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxGraphNodeSettingsProvider")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxGraphNodeSettingsProvider")
	}
	static class IGbxGraphNodeSettingsProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGbxGraphNodeSettingsProvider>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_IGbxGraphNodeSettingsProvider;

// Class GbxEngine.GbxLoadingRangeOverride
// 0x0068 (0x0098 - 0x0030)
class UGbxLoadingRangeOverride final : public UWorldSubsystem
{
public:
	uint8                                         Pad_30[0x68];                                      // 0x0030(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PopLoadingRangeOverridePreset();
	void PushLoadingRangeOverridePreset(const class FName& Preset, const class FString& reason);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxLoadingRangeOverride")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxLoadingRangeOverride")
	}
	static class UGbxLoadingRangeOverride* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxLoadingRangeOverride>();
	}
};
DUMPER7_ASSERTS_UGbxLoadingRangeOverride;

// Class GbxEngine.GbxMirrorDataTable
// 0x0000 (0x0240 - 0x0240)
class UGbxMirrorDataTable final : public UGbxMirrorDataTableBase
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxMirrorDataTable")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxMirrorDataTable")
	}
	static class UGbxMirrorDataTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxMirrorDataTable>();
	}
};
DUMPER7_ASSERTS_UGbxMirrorDataTable;

// Class GbxEngine.GbxParamBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UGbxParamBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FGbxParam Conv_ActorToGbxParam(class AActor* Value);
	static struct FGbxParam Conv_AttributeToGbxParam(const FGameDataHandleProperty_& Value);
	static struct FGbxParam Conv_BlackboardEntryToGbxParam(const struct FGbxBlackboardEntryRef& Value);
	static struct FGbxParam Conv_BoolToGbxParam(bool Value);
	static struct FGbxParam Conv_DoubleToGbxParam(double Value);
	static struct FGbxParam Conv_FloatToGbxParam(float Value);
	static struct FGbxParam Conv_GameplayTagToGbxParam(const struct FGameplayTag& Value);
	static struct FGbxParam Conv_GbxDefToGbxParam(const FGbxDefPtrProperty_& Value);
	static class FString Conv_GbxParamToString(const struct FGbxParam& GbxParam);
	static struct FGbxParam Conv_HitResultToGbxParam(const struct FHitResult& Value);
	static struct FGbxParam Conv_IntToGbxParam(int32 Value);
	static struct FGbxParam Conv_LinearColorToGbxParam(const struct FLinearColor& Value);
	static struct FGbxParam Conv_NameToGbxParam(const class FName& Value);
	static struct FGbxParam Conv_NumericRangeToGbxParam(const struct FNumericRange& Value);
	static struct FGbxParam Conv_ObjectToGbxParam(class UObject* Value);
	static struct FGbxParam Conv_RotatorToGbxParam(const struct FRotator& Value);
	static struct FGbxParam Conv_SceneComponentToGbxParam(class USceneComponent* Value);
	static struct FGbxParam Conv_SoftObjectPtrToGbxParam(const TSoftObjectPtr<class UObject>& Value);
	static struct FGbxParam Conv_StringToGbxParam(const class FString& Value);
	static struct FGbxParam Conv_TextToGbxParam(const class FText& Value);
	static struct FGbxParam Conv_VectorToGbxParam(const struct FVector& Value);
	static double GetGbxParam_Double(const struct FGbxParam& GbxParam, const class UObject* Context);
	static float GetGbxParam_Float(const struct FGbxParam& GbxParam, const class UObject* Context);
	static int32 GetGbxParam_Int(const struct FGbxParam& GbxParam, const class UObject* Context);
	static struct FVector GetRelativeDirection(class AActor* Actor, const struct FGbxRelativeRotation& Direction);
	static struct FVector GetRelativeLocation(class AActor* Actor, const struct FGbxRelativeLocation& Location);
	static struct FRotator GetRelativeRotation(class AActor* Actor, const struct FGbxRelativeRotation& Rotation);
	static struct FVector GetRelativeVelocity(class AActor* Actor, const struct FGbxRelativeRotation& Direction, float speed);
	static class FString GetSummary_GbxParam(const struct FGbxParam& Param);
	static struct FGbxParam MakeGbxParamFromString(const class FString& String);
	static struct FGbxRelativeLocation MakeRelativeLocation(EGbxRelativeLocationType type, class FName socket, const struct FGbxRelativeRotation& OffsetDirection, float OffsetDistance, const struct FVector& OffsetVector);
	static struct FGbxRelativeRotation MakeRelativeRotation(EGbxRelativeRotationType type, EGbxRelativeRotationModifier Modifier, const struct FRotator& Offset, float ConeAroundDirection, class FName socket);
	static void Resolve(const struct FGbxParam& Param, const class UObject* Context, int32* Value);
	static class AActor* Resolve_Actor(const struct FGbxParam& Param, class UObject* Context);
	static bool Resolve_Bool(const struct FGbxParam& Param, class UObject* Context);
	static double Resolve_Double(const struct FGbxParam& Param, class UObject* Context);
	static float Resolve_Float(const struct FGbxParam& Param, class UObject* Context);
	static struct FGameplayTag Resolve_GameplayTag(const struct FGbxParam& Param, class UObject* Context);
	static FGbxDefPtrProperty_ Resolve_GbxDef(const struct FGbxParam& Param, class UObject* Context);
	static int32 Resolve_Int(const struct FGbxParam& Param, class UObject* Context);
	static class FName Resolve_Name(const struct FGbxParam& Param, class UObject* Context);
	static struct FNumericRange Resolve_NumericRange(const struct FGbxParam& Param, class UObject* Context);
	static class UObject* Resolve_Object(const struct FGbxParam& Param, class UObject* Context);
	static struct FRotator Resolve_Rotator(const struct FGbxParam& Param, class UObject* Context);
	static class USceneComponent* Resolve_SceneComponent(const struct FGbxParam& Param, class UObject* Context);
	static TSoftObjectPtr<class UObject> Resolve_SoftObjectPtr(const struct FGbxParam& Param, class UObject* Context);
	static class FString Resolve_String(const struct FGbxParam& Param, class UObject* Context);
	static class FText Resolve_Text(const struct FGbxParam& Param, class UObject* Context);
	static struct FVector Resolve_Vector(const struct FGbxParam& Param, class UObject* Context);
	static void SetGbxParam_Double(struct FGbxParam& GbxParam, double DoubleValue);
	static void SetGbxParam_Float(struct FGbxParam& GbxParam, float FloatValue);
	static void SetGbxParam_Int(struct FGbxParam& GbxParam, int32 IntValue);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxParamBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxParamBlueprintLibrary")
	}
	static class UGbxParamBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxParamBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UGbxParamBlueprintLibrary;

// Class GbxEngine.GbxPreStreamDataAsset
// 0x0000 (0x0030 - 0x0030)
class UGbxPreStreamDataAsset : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxPreStreamDataAsset")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxPreStreamDataAsset")
	}
	static class UGbxPreStreamDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxPreStreamDataAsset>();
	}
};
DUMPER7_ASSERTS_UGbxPreStreamDataAsset;

// Class GbxEngine.GbxBPSceneComponentResolver
// 0x0000 (0x0028 - 0x0028)
class UGbxBPSceneComponentResolver final : public UGbxSceneComponentResolver
{
public:
	class USceneComponent* K2_Resolve(class AActor* Actor) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxBPSceneComponentResolver")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxBPSceneComponentResolver")
	}
	static class UGbxBPSceneComponentResolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxBPSceneComponentResolver>();
	}
};
DUMPER7_ASSERTS_UGbxBPSceneComponentResolver;

// Class GbxEngine.GbxWorldBreadcrumbUserData
// 0x0008 (0x0030 - 0x0028)
class UGbxWorldBreadcrumbUserData final : public UAssetUserData
{
public:
	class AActor*                                 BreadcrumbGraph;                                   // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("GbxWorldBreadcrumbUserData")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"GbxWorldBreadcrumbUserData")
	}
	static class UGbxWorldBreadcrumbUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGbxWorldBreadcrumbUserData>();
	}
};
DUMPER7_ASSERTS_UGbxWorldBreadcrumbUserData;

// Class GbxEngine.NumericRangeExt
// 0x0000 (0x0028 - 0x0028)
class UNumericRangeExt final : public UBlueprintFunctionLibrary
{
public:
	static struct FNumericRange CreateNumericRange(float Value, float Variance);
	static struct FNumericRange CreateNumericRangeMinMax(float Minimum, float Maximum);
	static float GenerateRandomNumber(const struct FNumericRange& Range);
	static float GetMaximum(const struct FNumericRange& Range);
	static float GetMinimum(const struct FNumericRange& Range);
	static bool IsWithin(const struct FNumericRange& Range, float Value);
	static void SetMaximum(struct FNumericRange* Range, float Maximum);
	static void SetMinimum(struct FNumericRange* Range, float Minimum);
	static class FString ToMinMaxString(const struct FNumericRange& Range);
	static class FString ToString(const struct FNumericRange& Range);
	static class FString ToValueString(const struct FNumericRange& Range);
	static class FString ToValueVarianceString(const struct FNumericRange& Range);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NumericRangeExt")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NumericRangeExt")
	}
	static class UNumericRangeExt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNumericRangeExt>();
	}
};
DUMPER7_ASSERTS_UNumericRangeExt;

// Class GbxEngine.AttributePropertyValueResolverTestContext
// 0x0290 (0x02B8 - 0x0028)
class UAttributePropertyValueResolverTestContext final : public UObject
{
public:
	float                                         FloatProp;                                         // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGbxAttributeFloat                     AttributeFloatProp;                                // 0x002C(0x000C)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FloatPropStaticArray[0x3];                         // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 FloatPropDynamicArray;                             // 0x0048(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FGbxAttributeFloat>             AttributeFloatPropDynamicArray;                    // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        VectorPropDynamicArray;                            // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UAttributePropertyValueResolverTestContext* ObjectProp;                                    // 0x0078(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAttributePropertyValueResolverTestContext* ObjectPropStaticArray[0x3];                    // 0x0080(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAttributePropertyValueResolverTestContext*> ObjectPropDynamicArray;                // 0x0098(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FAttributePropertyValueResolverTestStruct StructProp;                                     // 0x00A8(0x0080)(NativeAccessSpecifierPublic)
	struct FAttributePropertyValueResolverTestStruct StructPropStaticArray[0x3];                     // 0x0128(0x0080)(NativeAccessSpecifierPublic)
	TArray<struct FAttributePropertyValueResolverTestStruct> StructPropDynamicArray;                 // 0x02A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("AttributePropertyValueResolverTestContext")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"AttributePropertyValueResolverTestContext")
	}
	static class UAttributePropertyValueResolverTestContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAttributePropertyValueResolverTestContext>();
	}
};
DUMPER7_ASSERTS_UAttributePropertyValueResolverTestContext;

}

