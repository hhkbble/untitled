#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxEngine

#include "Basic.hpp"

#include "GbxEngine_classes.hpp"
#include "GbxEngine_parameters.hpp"


namespace SDK
{

// Function GbxEngine.GbxActorStateOwner.OnActorStateChangedBP
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGbxActorStateMachineKey&  StateMachine                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxActorStateMachineStateKey&NewState                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxActorStateMachineStateKey&PreviousState                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxActorStateOwner::OnActorStateChangedBP(const struct FGbxActorStateMachineKey& StateMachine, const struct FGbxActorStateMachineStateKey& NewState, const struct FGbxActorStateMachineStateKey& PreviousState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxActorStateOwner", "OnActorStateChangedBP");

	Params::GbxActorStateOwner_OnActorStateChangedBP Parms{};

	Parms.StateMachine = std::move(StateMachine);
	Parms.NewState = std::move(NewState);
	Parms.PreviousState = std::move(PreviousState);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.Conv_GbxActorStateMachineKey_Index
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxActorStateMachineKey&  StateMachine                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxActorStateBlueprintLibrary::Conv_GbxActorStateMachineKey_Index(const struct FGbxActorStateMachineKey& StateMachine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "Conv_GbxActorStateMachineKey_Index");

	Params::GbxActorStateBlueprintLibrary_Conv_GbxActorStateMachineKey_Index Parms{};

	Parms.StateMachine = std::move(StateMachine);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.Conv_GbxActorStateMachineKey_Name
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxActorStateMachineKey&  StateMachine                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxActorStateBlueprintLibrary::Conv_GbxActorStateMachineKey_Name(const struct FGbxActorStateMachineKey& StateMachine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "Conv_GbxActorStateMachineKey_Name");

	Params::GbxActorStateBlueprintLibrary_Conv_GbxActorStateMachineKey_Name Parms{};

	Parms.StateMachine = std::move(StateMachine);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.Conv_GbxActorStateMachineKey_String
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxActorStateMachineKey&  StateMachine                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxActorStateBlueprintLibrary::Conv_GbxActorStateMachineKey_String(const struct FGbxActorStateMachineKey& StateMachine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "Conv_GbxActorStateMachineKey_String");

	Params::GbxActorStateBlueprintLibrary_Conv_GbxActorStateMachineKey_String Parms{};

	Parms.StateMachine = std::move(StateMachine);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.Conv_GbxActorStateMachineStateKey_Bool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxActorStateMachineStateKey&State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActorStateBlueprintLibrary::Conv_GbxActorStateMachineStateKey_Bool(const struct FGbxActorStateMachineStateKey& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "Conv_GbxActorStateMachineStateKey_Bool");

	Params::GbxActorStateBlueprintLibrary_Conv_GbxActorStateMachineStateKey_Bool Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.Conv_GbxActorStateMachineStateKey_Index
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxActorStateMachineStateKey&State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxActorStateBlueprintLibrary::Conv_GbxActorStateMachineStateKey_Index(const struct FGbxActorStateMachineStateKey& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "Conv_GbxActorStateMachineStateKey_Index");

	Params::GbxActorStateBlueprintLibrary_Conv_GbxActorStateMachineStateKey_Index Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.Conv_GbxActorStateMachineStateKey_Name
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxActorStateMachineStateKey&State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxActorStateBlueprintLibrary::Conv_GbxActorStateMachineStateKey_Name(const struct FGbxActorStateMachineStateKey& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "Conv_GbxActorStateMachineStateKey_Name");

	Params::GbxActorStateBlueprintLibrary_Conv_GbxActorStateMachineStateKey_Name Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.Conv_GbxActorStateMachineStateKey_String
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxActorStateMachineStateKey&State                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxActorStateBlueprintLibrary::Conv_GbxActorStateMachineStateKey_String(const struct FGbxActorStateMachineStateKey& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "Conv_GbxActorStateMachineStateKey_String");

	Params::GbxActorStateBlueprintLibrary_Conv_GbxActorStateMachineStateKey_String Parms{};

	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.Conv_Name_GbxActorStateMachineKey
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey         ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGbxActorStateMachineKey UGbxActorStateBlueprintLibrary::Conv_Name_GbxActorStateMachineKey(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "Conv_Name_GbxActorStateMachineKey");

	Params::GbxActorStateBlueprintLibrary_Conv_Name_GbxActorStateMachineKey Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.Conv_Name_GbxActorStateMachineStateKey
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineStateKey    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGbxActorStateMachineStateKey UGbxActorStateBlueprintLibrary::Conv_Name_GbxActorStateMachineStateKey(class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "Conv_Name_GbxActorStateMachineStateKey");

	Params::GbxActorStateBlueprintLibrary_Conv_Name_GbxActorStateMachineStateKey Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.GetActorState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateMachine                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineStateKey    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGbxActorStateMachineStateKey UGbxActorStateBlueprintLibrary::GetActorState(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "GetActorState");

	Params::GbxActorStateBlueprintLibrary_GetActorState Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateMachine = std::move(StateMachine);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateMachine = std::move(Parms.StateMachine);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.GetActorStateAsBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateMachine                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActorStateBlueprintLibrary::GetActorStateAsBool(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "GetActorStateAsBool");

	Params::GbxActorStateBlueprintLibrary_GetActorStateAsBool Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateMachine = std::move(StateMachine);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateMachine = std::move(Parms.StateMachine);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.GetActorStateAsInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateMachine                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxActorStateBlueprintLibrary::GetActorStateAsInt(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "GetActorStateAsInt");

	Params::GbxActorStateBlueprintLibrary_GetActorStateAsInt Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateMachine = std::move(StateMachine);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateMachine = std::move(Parms.StateMachine);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.GetActorStateMachines
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActorStateMachineKey> ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActorStateMachineKey> UGbxActorStateBlueprintLibrary::GetActorStateMachines(class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "GetActorStateMachines");

	Params::GbxActorStateBlueprintLibrary_GetActorStateMachines Parms{};

	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.GetActorStateMachineStates
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateMachine                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FGbxActorStateMachineStateKey>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FGbxActorStateMachineStateKey> UGbxActorStateBlueprintLibrary::GetActorStateMachineStates(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "GetActorStateMachineStates");

	Params::GbxActorStateBlueprintLibrary_GetActorStateMachineStates Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateMachine = std::move(StateMachine);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateMachine = std::move(Parms.StateMachine);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.GetActorStateValue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateName                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxActorStateBlueprintLibrary::GetActorStateValue(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "GetActorStateValue");

	Params::GbxActorStateBlueprintLibrary_GetActorStateValue Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateName = std::move(StateName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateName = std::move(Parms.StateName);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.GetTimeSinceStateChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateMachine                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxActorStateBlueprintLibrary::GetTimeSinceStateChanged(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "GetTimeSinceStateChanged");

	Params::GbxActorStateBlueprintLibrary_GetTimeSinceStateChanged Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateMachine = std::move(StateMachine);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateMachine = std::move(Parms.StateMachine);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.IsInActorState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateMachine                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineStateKey&   State                                                  (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActorStateBlueprintLibrary::IsInActorState(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine, struct FGbxActorStateMachineStateKey& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "IsInActorState");

	Params::GbxActorStateBlueprintLibrary_IsInActorState Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateMachine = std::move(StateMachine);
	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateMachine = std::move(Parms.StateMachine);
	State = std::move(Parms.State);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.SetActorState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateMachine                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineStateKey&   State                                                  (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActorStateBlueprintLibrary::SetActorState(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine, struct FGbxActorStateMachineStateKey& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "SetActorState");

	Params::GbxActorStateBlueprintLibrary_SetActorState Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateMachine = std::move(StateMachine);
	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateMachine = std::move(Parms.StateMachine);
	State = std::move(Parms.State);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.SetActorStateAsBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateMachine                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActorStateBlueprintLibrary::SetActorStateAsBool(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine, bool State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "SetActorStateAsBool");

	Params::GbxActorStateBlueprintLibrary_SetActorStateAsBool Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateMachine = std::move(StateMachine);
	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateMachine = std::move(Parms.StateMachine);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.SetActorStateDefaultOverride
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateMachine                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineStateKey&   State                                                  (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxActorStateBlueprintLibrary::SetActorStateDefaultOverride(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine, struct FGbxActorStateMachineStateKey& State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "SetActorStateDefaultOverride");

	Params::GbxActorStateBlueprintLibrary_SetActorStateDefaultOverride Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateMachine = std::move(StateMachine);
	Parms.State = std::move(State);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateMachine = std::move(Parms.StateMachine);
	State = std::move(Parms.State);
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.SetActorStateValue
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateName                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineStateKey&   StateValue                                             (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActorStateBlueprintLibrary::SetActorStateValue(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateName, struct FGbxActorStateMachineStateKey& StateValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "SetActorStateValue");

	Params::GbxActorStateBlueprintLibrary_SetActorStateValue Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateName = std::move(StateName);
	Parms.StateValue = std::move(StateValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateName = std::move(Parms.StateName);
	StateValue = std::move(Parms.StateValue);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.SetNextActorState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateMachine                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineStateKey    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGbxActorStateMachineStateKey UGbxActorStateBlueprintLibrary::SetNextActorState(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "SetNextActorState");

	Params::GbxActorStateBlueprintLibrary_SetNextActorState Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateMachine = std::move(StateMachine);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateMachine = std::move(Parms.StateMachine);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxActorStateBlueprintLibrary.ToggleActorState
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxActorStateMachineKey&        StateMachine                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxActorStateBlueprintLibrary::ToggleActorState(class UObject* OwnerContext, struct FGbxActorStateMachineKey& StateMachine)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxActorStateBlueprintLibrary", "ToggleActorState");

	Params::GbxActorStateBlueprintLibrary_ToggleActorState Parms{};

	Parms.OwnerContext = OwnerContext;
	Parms.StateMachine = std::move(StateMachine);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	StateMachine = std::move(Parms.StateMachine);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAssetManagerBlueprintFunctionLibrary.PurgeWeakAssetCache
// (Final, Native, Static, Public, BlueprintCallable)

void UGbxAssetManagerBlueprintFunctionLibrary::PurgeWeakAssetCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAssetManagerBlueprintFunctionLibrary", "PurgeWeakAssetCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxAssetManagerBlueprintFunctionLibrary.PurgeWeakAssetCacheForOwningLevel
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAssetManagerBlueprintFunctionLibrary::PurgeWeakAssetCacheForOwningLevel(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAssetManagerBlueprintFunctionLibrary", "PurgeWeakAssetCacheForOwningLevel");

	Params::GbxAssetManagerBlueprintFunctionLibrary_PurgeWeakAssetCacheForOwningLevel Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.AddModifierToGbxAttribute
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const FGbxDefPtrProperty_&              attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxAttributeModifierType               ModifierType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   modifiervalue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoRefresh                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxAttributeModifierActionExecOutput*  ModifierActionResult                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeModifierHandle      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeModifierHandle UGbxAttributeBlueprintLibrary::AddModifierToGbxAttribute(const FGbxDefPtrProperty_& attribute, class UObject* ContextSource, EGbxAttributeModifierType ModifierType, float modifiervalue, bool bAutoRefresh, EGbxAttributeModifierActionExecOutput* ModifierActionResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "AddModifierToGbxAttribute");

	Params::GbxAttributeBlueprintLibrary_AddModifierToGbxAttribute Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.ModifierType = ModifierType;
	Parms.modifiervalue = modifiervalue;
	Parms.bAutoRefresh = bAutoRefresh;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ModifierActionResult != nullptr)
		*ModifierActionResult = Parms.ModifierActionResult;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.BindEventToOnAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             AttributeDef                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TDelegate<void(float OldValue, float NewValue)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeDelegateBindingHandleReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeDelegateBindingHandle UGbxAttributeBlueprintLibrary::BindEventToOnAttributeChanged(class FName AttributeDef, class UObject* ContextSource, const TDelegate<void(float OldValue, float NewValue)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "BindEventToOnAttributeChanged");

	Params::GbxAttributeBlueprintLibrary_BindEventToOnAttributeChanged Parms{};

	Parms.AttributeDef = AttributeDef;
	Parms.ContextSource = ContextSource;
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.BindEventToOnFloatAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeFloat&              attribute                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(float OldValue, float NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::BindEventToOnFloatAttributeChanged(struct FGbxAttributeFloat& attribute, TDelegate<void(float OldValue, float NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "BindEventToOnFloatAttributeChanged");

	Params::GbxAttributeBlueprintLibrary_BindEventToOnFloatAttributeChanged Parms{};

	Parms.attribute = std::move(attribute);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = std::move(Parms.attribute);
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.BindEventToOnIntegerAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeInteger&            attribute                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(float OldValue, float NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::BindEventToOnIntegerAttributeChanged(struct FGbxAttributeInteger& attribute, TDelegate<void(float OldValue, float NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "BindEventToOnIntegerAttributeChanged");

	Params::GbxAttributeBlueprintLibrary_BindEventToOnIntegerAttributeChanged Parms{};

	Parms.attribute = std::move(attribute);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = std::move(Parms.attribute);
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.BreakGbxAttributeFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeFloat&        attribute                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  BaseValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::BreakGbxAttributeFloat(const struct FGbxAttributeFloat& attribute, float* Value, float* BaseValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "BreakGbxAttributeFloat");

	Params::GbxAttributeBlueprintLibrary_BreakGbxAttributeFloat Parms{};

	Parms.attribute = std::move(attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	if (BaseValue != nullptr)
		*BaseValue = Parms.BaseValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.BreakGbxAttributeInteger
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeInteger&      attribute                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  BaseValue                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::BreakGbxAttributeInteger(const struct FGbxAttributeInteger& attribute, int32* Value, int32* BaseValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "BreakGbxAttributeInteger");

	Params::GbxAttributeBlueprintLibrary_BreakGbxAttributeInteger Parms{};

	Parms.attribute = std::move(attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;

	if (BaseValue != nullptr)
		*BaseValue = Parms.BaseValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.Conv_GbxAttributeFloatToFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeFloat&        attribute                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeBlueprintLibrary::Conv_GbxAttributeFloatToFloat(const struct FGbxAttributeFloat& attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "Conv_GbxAttributeFloatToFloat");

	Params::GbxAttributeBlueprintLibrary_Conv_GbxAttributeFloatToFloat Parms{};

	Parms.attribute = std::move(attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.Conv_GbxAttributeFloatToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeFloat&        attribute                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeBlueprintLibrary::Conv_GbxAttributeFloatToString(const struct FGbxAttributeFloat& attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "Conv_GbxAttributeFloatToString");

	Params::GbxAttributeBlueprintLibrary_Conv_GbxAttributeFloatToString Parms{};

	Parms.attribute = std::move(attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.Conv_GbxAttributeIntegerToInteger
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeInteger&      attribute                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxAttributeBlueprintLibrary::Conv_GbxAttributeIntegerToInteger(const struct FGbxAttributeInteger& attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "Conv_GbxAttributeIntegerToInteger");

	Params::GbxAttributeBlueprintLibrary_Conv_GbxAttributeIntegerToInteger Parms{};

	Parms.attribute = std::move(attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.Conv_GbxAttributeIntegerToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeInteger&      attribute                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeBlueprintLibrary::Conv_GbxAttributeIntegerToString(const struct FGbxAttributeInteger& attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "Conv_GbxAttributeIntegerToString");

	Params::GbxAttributeBlueprintLibrary_Conv_GbxAttributeIntegerToString Parms{};

	Parms.attribute = std::move(attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.Conv_GbxAttributeModifierHandleToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeModifierHandle&attribute                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeBlueprintLibrary::Conv_GbxAttributeModifierHandleToString(const struct FGbxAttributeModifierHandle& attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "Conv_GbxAttributeModifierHandleToString");

	Params::GbxAttributeBlueprintLibrary_Conv_GbxAttributeModifierHandleToString Parms{};

	Parms.attribute = std::move(attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.EqualEqual_GbxAttributeFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeFloat&        A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGbxAttributeFloat&        B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeBlueprintLibrary::EqualEqual_GbxAttributeFloat(const struct FGbxAttributeFloat& A, const struct FGbxAttributeFloat& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "EqualEqual_GbxAttributeFloat");

	Params::GbxAttributeBlueprintLibrary_EqualEqual_GbxAttributeFloat Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.EqualEqual_GbxAttributeFloatValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeFloat&        A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeBlueprintLibrary::EqualEqual_GbxAttributeFloatValue(const struct FGbxAttributeFloat& A, float B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "EqualEqual_GbxAttributeFloatValue");

	Params::GbxAttributeBlueprintLibrary_EqualEqual_GbxAttributeFloatValue Parms{};

	Parms.A = std::move(A);
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.EqualEqual_GbxAttributeInteger
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeInteger&      A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FGbxAttributeInteger&      B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeBlueprintLibrary::EqualEqual_GbxAttributeInteger(const struct FGbxAttributeInteger& A, const struct FGbxAttributeInteger& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "EqualEqual_GbxAttributeInteger");

	Params::GbxAttributeBlueprintLibrary_EqualEqual_GbxAttributeInteger Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.EqualEqual_GbxAttributeIntegerValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeInteger&      A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   B                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeBlueprintLibrary::EqualEqual_GbxAttributeIntegerValue(const struct FGbxAttributeInteger& A, int32 B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "EqualEqual_GbxAttributeIntegerValue");

	Params::GbxAttributeBlueprintLibrary_EqualEqual_GbxAttributeIntegerValue Parms{};

	Parms.A = std::move(A);
	Parms.B = B;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetAttributeAsActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               Class_0                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           DefaultValue                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGbxAttributeBlueprintLibrary::GetAttributeAsActor(FGameDataHandleProperty_& attribute, class UObject* ContextSource, TSubclassOf<class AActor> Class_0, class AActor* DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetAttributeAsActor");

	Params::GbxAttributeBlueprintLibrary_GetAttributeAsActor Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.Class_0 = Class_0;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetAttributeAsBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeBlueprintLibrary::GetAttributeAsBool(FGameDataHandleProperty_& attribute, class UObject* ContextSource, bool DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetAttributeAsBool");

	Params::GbxAttributeBlueprintLibrary_GetAttributeAsBool Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetAttributeAsFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeBlueprintLibrary::GetAttributeAsFloat(FGameDataHandleProperty_& attribute, class UObject* ContextSource, float DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetAttributeAsFloat");

	Params::GbxAttributeBlueprintLibrary_GetAttributeAsFloat Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetAttributeAsInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxAttributeBlueprintLibrary::GetAttributeAsInt(FGameDataHandleProperty_& attribute, class UObject* ContextSource, int32 DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetAttributeAsInt");

	Params::GbxAttributeBlueprintLibrary_GetAttributeAsInt Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetAttributeAsNumericRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNumericRange&             DefaultValue                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FNumericRange*                   ReturnValue                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::GetAttributeAsNumericRange(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FNumericRange& DefaultValue, struct FNumericRange* ReturnValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetAttributeAsNumericRange");

	Params::GbxAttributeBlueprintLibrary_GetAttributeAsNumericRange Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = std::move(DefaultValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;

	if (ReturnValue != nullptr)
		*ReturnValue = std::move(Parms.ReturnValue);
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetAttributeAsObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          DefaultValue                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxAttributeBlueprintLibrary::GetAttributeAsObject(FGameDataHandleProperty_& attribute, class UObject* ContextSource, class UClass* Class_0, class UObject* DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetAttributeAsObject");

	Params::GbxAttributeBlueprintLibrary_GetAttributeAsObject Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.Class_0 = Class_0;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetAttributeAsRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGbxAttributeBlueprintLibrary::GetAttributeAsRotator(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FRotator& DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetAttributeAsRotator");

	Params::GbxAttributeBlueprintLibrary_GetAttributeAsRotator Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = std::move(DefaultValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetAttributeAsVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxAttributeBlueprintLibrary::GetAttributeAsVector(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FVector& DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetAttributeAsVector");

	Params::GbxAttributeBlueprintLibrary_GetAttributeAsVector Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = std::move(DefaultValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetSummary_GbxAttributeInit
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAttributeInit&         Init                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeBlueprintLibrary::GetSummary_GbxAttributeInit(const struct FGbxAttributeInit& Init)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetSummary_GbxAttributeInit");

	Params::GbxAttributeBlueprintLibrary_GetSummary_GbxAttributeInit Parms{};

	Parms.Init = std::move(Init);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetSummary_GbxWeightedAttributeInit
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxWeightedAttributeInit& Init                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxAttributeBlueprintLibrary::GetSummary_GbxWeightedAttributeInit(const struct FGbxWeightedAttributeInit& Init)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetSummary_GbxWeightedAttributeInit");

	Params::GbxAttributeBlueprintLibrary_GetSummary_GbxWeightedAttributeInit Parms{};

	Parms.Init = std::move(Init);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetValueOfAttribute
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             AttributeDef                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxAttributeBlueprintLibrary::GetValueOfAttribute(class FName AttributeDef, class UObject* ContextSource, float DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetValueOfAttribute");

	Params::GbxAttributeBlueprintLibrary_GetValueOfAttribute Parms{};

	Parms.AttributeDef = AttributeDef;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetValueOfAttributeAsBoolean
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             AttributeDef                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeBlueprintLibrary::GetValueOfAttributeAsBoolean(class FName AttributeDef, class UObject* ContextSource, bool DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetValueOfAttributeAsBoolean");

	Params::GbxAttributeBlueprintLibrary_GetValueOfAttributeAsBoolean Parms{};

	Parms.AttributeDef = AttributeDef;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.GetValueOfAttributeAsInteger
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             AttributeDef                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   DefaultValue                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxAttributeBlueprintLibrary::GetValueOfAttributeAsInteger(class FName AttributeDef, class UObject* ContextSource, int32 DefaultValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "GetValueOfAttributeAsInteger");

	Params::GbxAttributeBlueprintLibrary_GetValueOfAttributeAsInteger Parms{};

	Parms.AttributeDef = AttributeDef;
	Parms.ContextSource = ContextSource;
	Parms.DefaultValue = DefaultValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.MakeGbxAttributeFloat
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   BaseValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeFloat               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeFloat UGbxAttributeBlueprintLibrary::MakeGbxAttributeFloat(float BaseValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "MakeGbxAttributeFloat");

	Params::GbxAttributeBlueprintLibrary_MakeGbxAttributeFloat Parms{};

	Parms.BaseValue = BaseValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.MakeGbxAttributeInteger
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   BaseValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeInteger             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeInteger UGbxAttributeBlueprintLibrary::MakeGbxAttributeInteger(int32 BaseValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "MakeGbxAttributeInteger");

	Params::GbxAttributeBlueprintLibrary_MakeGbxAttributeInteger Parms{};

	Parms.BaseValue = BaseValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.RefreshBindingToOnAttributeChangedEvent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxAttributeDelegateBindingHandle&BindingHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAttributeDelegateBindingHandleReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAttributeDelegateBindingHandle UGbxAttributeBlueprintLibrary::RefreshBindingToOnAttributeChangedEvent(const struct FGbxAttributeDelegateBindingHandle& BindingHandle, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "RefreshBindingToOnAttributeChangedEvent");

	Params::GbxAttributeBlueprintLibrary_RefreshBindingToOnAttributeChangedEvent Parms{};

	Parms.BindingHandle = std::move(BindingHandle);
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.RemoveAttributeModifier
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeModifierHandle&     ModifierHandle                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAttributeBlueprintLibrary::RemoveAttributeModifier(struct FGbxAttributeModifierHandle& ModifierHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "RemoveAttributeModifier");

	Params::GbxAttributeBlueprintLibrary_RemoveAttributeModifier Parms{};

	Parms.ModifierHandle = std::move(ModifierHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ModifierHandle = std::move(Parms.ModifierHandle);

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.RemoveModifierFromGbxAttribute
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeModifierHandle&     ModifierHandle                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EGbxAttributeModifierActionExecOutput*  ModifierActionResult                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::RemoveModifierFromGbxAttribute(struct FGbxAttributeModifierHandle& ModifierHandle, EGbxAttributeModifierActionExecOutput* ModifierActionResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "RemoveModifierFromGbxAttribute");

	Params::GbxAttributeBlueprintLibrary_RemoveModifierFromGbxAttribute Parms{};

	Parms.ModifierHandle = std::move(ModifierHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ModifierHandle = std::move(Parms.ModifierHandle);

	if (ModifierActionResult != nullptr)
		*ModifierActionResult = Parms.ModifierActionResult;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.RemoveMultipleAttributeModifiers
// (Final, BlueprintAuthorityOnly, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FGbxAttributeModifierHandle>&ModifierHandles                                        (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::RemoveMultipleAttributeModifiers(TArray<struct FGbxAttributeModifierHandle>& ModifierHandles)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "RemoveMultipleAttributeModifiers");

	Params::GbxAttributeBlueprintLibrary_RemoveMultipleAttributeModifiers Parms{};

	Parms.ModifierHandles = std::move(ModifierHandles);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ModifierHandles = std::move(Parms.ModifierHandles);
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.ResetAttributeBaseValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::ResetAttributeBaseValue(FGameDataHandleProperty_& attribute, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "ResetAttributeBaseValue");

	Params::GbxAttributeBlueprintLibrary_ResetAttributeBaseValue Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.SetAttributeByPercentage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGameDataHandleProperty_&               MaxAttribute                                           (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Percentage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxPercentage                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::SetAttributeByPercentage(class UObject* ContextSource, FGameDataHandleProperty_& attribute, FGameDataHandleProperty_& MaxAttribute, float Percentage, float MaxPercentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "SetAttributeByPercentage");

	Params::GbxAttributeBlueprintLibrary_SetAttributeByPercentage Parms{};

	Parms.ContextSource = ContextSource;
	Parms.attribute = attribute;
	Parms.MaxAttribute = MaxAttribute;
	Parms.Percentage = Percentage;
	Parms.MaxPercentage = MaxPercentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;
	MaxAttribute = Parms.MaxAttribute;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.SetAttributeToActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::SetAttributeToActor(FGameDataHandleProperty_& attribute, class UObject* ContextSource, class AActor* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "SetAttributeToActor");

	Params::GbxAttributeBlueprintLibrary_SetAttributeToActor Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.SetAttributeToBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::SetAttributeToBool(FGameDataHandleProperty_& attribute, class UObject* ContextSource, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "SetAttributeToBool");

	Params::GbxAttributeBlueprintLibrary_SetAttributeToBool Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.SetAttributeToFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::SetAttributeToFloat(FGameDataHandleProperty_& attribute, class UObject* ContextSource, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "SetAttributeToFloat");

	Params::GbxAttributeBlueprintLibrary_SetAttributeToFloat Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.SetAttributeToInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::SetAttributeToInt(FGameDataHandleProperty_& attribute, class UObject* ContextSource, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "SetAttributeToInt");

	Params::GbxAttributeBlueprintLibrary_SetAttributeToInt Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.SetAttributeToNumericRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNumericRange&             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::SetAttributeToNumericRange(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FNumericRange& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "SetAttributeToNumericRange");

	Params::GbxAttributeBlueprintLibrary_SetAttributeToNumericRange Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.SetAttributeToObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::SetAttributeToObject(FGameDataHandleProperty_& attribute, class UObject* ContextSource, class UObject* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "SetAttributeToObject");

	Params::GbxAttributeBlueprintLibrary_SetAttributeToObject Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.SetAttributeToRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::SetAttributeToRotator(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "SetAttributeToRotator");

	Params::GbxAttributeBlueprintLibrary_SetAttributeToRotator Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.SetAttributeToVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// FGameDataHandleProperty_&               attribute                                              (Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::SetAttributeToVector(FGameDataHandleProperty_& attribute, class UObject* ContextSource, const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "SetAttributeToVector");

	Params::GbxAttributeBlueprintLibrary_SetAttributeToVector Parms{};

	Parms.attribute = attribute;
	Parms.ContextSource = ContextSource;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = Parms.attribute;
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.UnbindAllEventsFromOnFloatAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeFloat&              attribute                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::UnbindAllEventsFromOnFloatAttributeChanged(struct FGbxAttributeFloat& attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "UnbindAllEventsFromOnFloatAttributeChanged");

	Params::GbxAttributeBlueprintLibrary_UnbindAllEventsFromOnFloatAttributeChanged Parms{};

	Parms.attribute = std::move(attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = std::move(Parms.attribute);
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.UnbindAllEventsFromOnIntegerAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeInteger&            attribute                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::UnbindAllEventsFromOnIntegerAttributeChanged(struct FGbxAttributeInteger& attribute)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "UnbindAllEventsFromOnIntegerAttributeChanged");

	Params::GbxAttributeBlueprintLibrary_UnbindAllEventsFromOnIntegerAttributeChanged Parms{};

	Parms.attribute = std::move(attribute);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = std::move(Parms.attribute);
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.UnbindEventFromOnFloatAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeFloat&              attribute                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(float OldValue, float NewValue)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::UnbindEventFromOnFloatAttributeChanged(struct FGbxAttributeFloat& attribute, const TDelegate<void(float OldValue, float NewValue)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "UnbindEventFromOnFloatAttributeChanged");

	Params::GbxAttributeBlueprintLibrary_UnbindEventFromOnFloatAttributeChanged Parms{};

	Parms.attribute = std::move(attribute);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = std::move(Parms.attribute);
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.UnbindEventFromOnIntegerAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxAttributeInteger&            attribute                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// const TDelegate<void(float OldValue, float NewValue)>&Delegate                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::UnbindEventFromOnIntegerAttributeChanged(struct FGbxAttributeInteger& attribute, const TDelegate<void(float OldValue, float NewValue)>& Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "UnbindEventFromOnIntegerAttributeChanged");

	Params::GbxAttributeBlueprintLibrary_UnbindEventFromOnIntegerAttributeChanged Parms{};

	Parms.attribute = std::move(attribute);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	attribute = std::move(Parms.attribute);
}


// Function GbxEngine.GbxAttributeBlueprintLibrary.UnbindFromOnAttributeChanged
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxAttributeDelegateBindingHandle&BindingHandle                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxAttributeBlueprintLibrary::UnbindFromOnAttributeChanged(const struct FGbxAttributeDelegateBindingHandle& BindingHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAttributeBlueprintLibrary", "UnbindFromOnAttributeChanged");

	Params::GbxAttributeBlueprintLibrary_UnbindFromOnAttributeChanged Parms{};

	Parms.BindingHandle = std::move(BindingHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxAutomationBlueprintLibrary.SimulateAxisInput
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FKey&                      Axis                                                   (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAutomationBlueprintLibrary::SimulateAxisInput(class APlayerController* PlayerController, const struct FKey& Axis, float Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAutomationBlueprintLibrary", "SimulateAxisInput");

	Params::GbxAutomationBlueprintLibrary_SimulateAxisInput Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Axis = std::move(Axis);
	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxAutomationBlueprintLibrary.SimulateButtonInput
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FKey&                      Key                                                    (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputEvent                             Event                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAutomationBlueprintLibrary::SimulateButtonInput(class APlayerController* PlayerController, const struct FKey& Key, EInputEvent Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAutomationBlueprintLibrary", "SimulateButtonInput");

	Params::GbxAutomationBlueprintLibrary_SimulateButtonInput Parms{};

	Parms.PlayerController = PlayerController;
	Parms.Key = std::move(Key);
	Parms.Event = Event;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.ClearBlackboardValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::ClearBlackboardValue(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "ClearBlackboardValue");

	Params::GbxBlackboardBlueprintLibrary_ClearBlackboardValue Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.Conv_BlackboardEntryRef_Name
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxBlackboardBlueprintLibrary::Conv_BlackboardEntryRef_Name(const struct FGbxBlackboardEntryRef& BlackboardKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "Conv_BlackboardEntryRef_Name");

	Params::GbxBlackboardBlueprintLibrary_Conv_BlackboardEntryRef_Name Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.Conv_BlackboardEntryRef_String
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxBlackboardBlueprintLibrary::Conv_BlackboardEntryRef_String(const struct FGbxBlackboardEntryRef& BlackboardKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "Conv_BlackboardEntryRef_String");

	Params::GbxBlackboardBlueprintLibrary_Conv_BlackboardEntryRef_String Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.EqualEqual_GbxBlackboardEntryRef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FGbxBlackboardEntryRef&    B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxBlackboardBlueprintLibrary::EqualEqual_GbxBlackboardEntryRef(const struct FGbxBlackboardEntryRef& A, const struct FGbxBlackboardEntryRef& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "EqualEqual_GbxBlackboardEntryRef");

	Params::GbxBlackboardBlueprintLibrary_EqualEqual_GbxBlackboardEntryRef Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               Class_0                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGbxBlackboardBlueprintLibrary::GetBlackboardActor(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, TSubclassOf<class AActor> Class_0, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardActor");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardActor Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.Class_0 = Class_0;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardActorPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class AActor>               Class_0                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGbxBlackboardBlueprintLibrary::GetBlackboardActorPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, TSubclassOf<class AActor> Class_0, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardActorPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardActorPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.Class_0 = Class_0;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UObject>           ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UObject> UGbxBlackboardBlueprintLibrary::GetBlackboardAsset(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardAsset");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardAsset Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardAssetPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UObject>           ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UObject> UGbxBlackboardBlueprintLibrary::GetBlackboardAssetPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardAssetPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardAssetPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxBlackboardBlueprintLibrary::GetBlackboardBool(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardBool");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardBool Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardBoolPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxBlackboardBlueprintLibrary::GetBlackboardBoolPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardBoolPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardBoolPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardDouble
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGbxBlackboardBlueprintLibrary::GetBlackboardDouble(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardDouble");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardDouble Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardDoublePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGbxBlackboardBlueprintLibrary::GetBlackboardDoublePure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardDoublePure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardDoublePure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxBlackboardBlueprintLibrary::GetBlackboardFloat(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardFloat");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardFloat Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardFloatPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxBlackboardBlueprintLibrary::GetBlackboardFloatPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardFloatPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardFloatPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardGbxDef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

FGbxDefPtrProperty_ UGbxBlackboardBlueprintLibrary::GetBlackboardGbxDef(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardGbxDef");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardGbxDef Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardGbxDefPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

FGbxDefPtrProperty_ UGbxBlackboardBlueprintLibrary::GetBlackboardGbxDefPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardGbxDefPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardGbxDefPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardHitResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FHitResult*                      HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::GetBlackboardHitResult(const struct FGbxBlackboardEntryRef& BlackboardKey, struct FHitResult* HitResult, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardHitResult");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardHitResult Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardHitResultPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FHitResult*                      HitResult                                              (Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::GetBlackboardHitResultPure(const struct FGbxBlackboardEntryRef& BlackboardKey, struct FHitResult* HitResult, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardHitResultPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardHitResultPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HitResult != nullptr)
		*HitResult = std::move(Parms.HitResult);
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxBlackboardBlueprintLibrary::GetBlackboardInt(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardInt");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardInt Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardIntPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxBlackboardBlueprintLibrary::GetBlackboardIntPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardIntPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardIntPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxBlackboardBlueprintLibrary::GetBlackboardName(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardName");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardName Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardNamePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxBlackboardBlueprintLibrary::GetBlackboardNamePure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardNamePure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardNamePure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardNumericRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNumericRange*                   ReturnValue                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::GetBlackboardNumericRange(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, struct FNumericRange* ReturnValue, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardNumericRange");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardNumericRange Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnValue != nullptr)
		*ReturnValue = std::move(Parms.ReturnValue);
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardNumericRangePure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNumericRange*                   ReturnValue                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::GetBlackboardNumericRangePure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, struct FNumericRange* ReturnValue, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardNumericRangePure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardNumericRangePure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReturnValue != nullptr)
		*ReturnValue = std::move(Parms.ReturnValue);
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxBlackboardBlueprintLibrary::GetBlackboardObject(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, class UClass* Class_0, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardObject");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardObject Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.Class_0 = Class_0;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardObjectPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UClass*                           Class_0                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxBlackboardBlueprintLibrary::GetBlackboardObjectPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, class UClass* Class_0, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardObjectPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardObjectPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.Class_0 = Class_0;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxBlackboardBlueprintLibrary::GetBlackboardParam(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardParam");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardParam Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardParamPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxBlackboardBlueprintLibrary::GetBlackboardParamPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardParamPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardParamPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGbxBlackboardBlueprintLibrary::GetBlackboardRotator(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardRotator");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardRotator Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardRotatorPure
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGbxBlackboardBlueprintLibrary::GetBlackboardRotatorPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardRotatorPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardRotatorPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardSceneComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USceneComponent>      Class_0                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* UGbxBlackboardBlueprintLibrary::GetBlackboardSceneComponent(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, TSubclassOf<class USceneComponent> Class_0, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardSceneComponent");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardSceneComponent Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.Class_0 = Class_0;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardSceneComponentPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class USceneComponent>      Class_0                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* UGbxBlackboardBlueprintLibrary::GetBlackboardSceneComponentPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, TSubclassOf<class USceneComponent> Class_0, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardSceneComponentPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardSceneComponentPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.Class_0 = Class_0;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxBlackboardBlueprintLibrary::GetBlackboardString(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardString");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardString Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardStringPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxBlackboardBlueprintLibrary::GetBlackboardStringPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardStringPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardStringPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxBlackboardBlueprintLibrary::GetBlackboardText(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardText");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardText Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardTextPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxBlackboardBlueprintLibrary::GetBlackboardTextPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardTextPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardTextPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxBlackboardBlueprintLibrary::GetBlackboardVector(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardVector");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardVector Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.GetBlackboardVectorPure
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bReportIfMissing                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxBlackboardBlueprintLibrary::GetBlackboardVectorPure(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* OwnerContext, bool bReportIfMissing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "GetBlackboardVectorPure");

	Params::GbxBlackboardBlueprintLibrary_GetBlackboardVectorPure Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.OwnerContext = OwnerContext;
	Parms.bReportIfMissing = bReportIfMissing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.NotEqual_GbxBlackboardEntryRef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    A                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FGbxBlackboardEntryRef&    B                                                      (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxBlackboardBlueprintLibrary::NotEqual_GbxBlackboardEntryRef(const struct FGbxBlackboardEntryRef& A, const struct FGbxBlackboardEntryRef& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "NotEqual_GbxBlackboardEntryRef");

	Params::GbxBlackboardBlueprintLibrary_NotEqual_GbxBlackboardEntryRef Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardActor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardActor(const struct FGbxBlackboardEntryRef& BlackboardKey, class AActor* Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardActor");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardActor Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = Value;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardAsset
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UObject>           Value                                                  (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardAsset(const struct FGbxBlackboardEntryRef& BlackboardKey, TSoftObjectPtr<class UObject> Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardAsset");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardAsset Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = Value;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardBool(const struct FGbxBlackboardEntryRef& BlackboardKey, bool Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardBool");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardBool Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = Value;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardDouble
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// double                                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardDouble(const struct FGbxBlackboardEntryRef& BlackboardKey, double Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardDouble");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardDouble Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = Value;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardFloat(const struct FGbxBlackboardEntryRef& BlackboardKey, float Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardFloat");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardFloat Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = Value;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardFromDataTable
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FDataTableValueHandle&     Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardFromDataTable(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FDataTableValueHandle& Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardFromDataTable");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardFromDataTable Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = std::move(Value);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardGbxDef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     Value                                                  (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardGbxDef(const struct FGbxBlackboardEntryRef& BlackboardKey, FGbxDefPtrProperty_ Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardGbxDef");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardGbxDef Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = Value;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardHitResult
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FHitResult&                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardHitResult(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FHitResult& Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardHitResult");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardHitResult Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = std::move(Value);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardInt(const struct FGbxBlackboardEntryRef& BlackboardKey, int32 Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardInt");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardInt Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = Value;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardName
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardName(const struct FGbxBlackboardEntryRef& BlackboardKey, class FName Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardName");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardName Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = Value;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardNumericRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FNumericRange&             Value                                                  (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardNumericRange(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FNumericRange& Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardNumericRange");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardNumericRange Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = std::move(Value);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardObject(const struct FGbxBlackboardEntryRef& BlackboardKey, class UObject* Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardObject");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardObject Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = Value;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FGbxParam&                 Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardParam(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FGbxParam& Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardParam");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardParam Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = std::move(Value);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FRotator&                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardRotator(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FRotator& Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardRotator");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardRotator Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = std::move(Value);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardSceneComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class USceneComponent*                  Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardSceneComponent(const struct FGbxBlackboardEntryRef& BlackboardKey, class USceneComponent* Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardSceneComponent");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardSceneComponent Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = Value;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardString(const struct FGbxBlackboardEntryRef& BlackboardKey, const class FString& Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardString");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardString Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = std::move(Value);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const class FText&                      Value                                                  (Parm, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardText(const struct FGbxBlackboardEntryRef& BlackboardKey, const class FText& Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardText");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardText Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = std::move(Value);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBlackboardBlueprintLibrary.SetBlackboardVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FGbxBlackboardEntryRef&    BlackboardKey                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBlackboardBlueprintLibrary::SetBlackboardVector(const struct FGbxBlackboardEntryRef& BlackboardKey, const struct FVector& Value, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBlackboardBlueprintLibrary", "SetBlackboardVector");

	Params::GbxBlackboardBlueprintLibrary_SetBlackboardVector Parms{};

	Parms.BlackboardKey = std::move(BlackboardKey);
	Parms.Value = std::move(Value);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.TrajectoryBlueprintLibrary.MakeTrajectoryOptions
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   MaxPrediction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AnglePercent                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  DirectionOffset                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// const struct FVector&                   LocalTargetOffset                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOverrideGravity                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Gravity                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTrajectoryOptions               ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FTrajectoryOptions UTrajectoryBlueprintLibrary::MakeTrajectoryOptions(float MaxPrediction, float speed, float AnglePercent, const struct FRotator& DirectionOffset, const struct FVector& LocalTargetOffset, bool bOverrideGravity, float Gravity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("TrajectoryBlueprintLibrary", "MakeTrajectoryOptions");

	Params::TrajectoryBlueprintLibrary_MakeTrajectoryOptions Parms{};

	Parms.MaxPrediction = MaxPrediction;
	Parms.speed = speed;
	Parms.AnglePercent = AnglePercent;
	Parms.DirectionOffset = std::move(DirectionOffset);
	Parms.LocalTargetOffset = std::move(LocalTargetOffset);
	Parms.bOverrideGravity = bOverrideGravity;
	Parms.Gravity = Gravity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxBlackboardOwner.OnBlackboardChangedBP
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGbxBlackboardEntryRef&    Entry                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IGbxBlackboardOwner::OnBlackboardChangedBP(const struct FGbxBlackboardEntryRef& Entry)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxBlackboardOwner", "OnBlackboardChangedBP");

	Params::GbxBlackboardOwner_OnBlackboardChangedBP Parms{};

	Parms.Entry = std::move(Entry);

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function GbxEngine.GbxBookmarkUtils.EmitBookmarkWithValue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBookmarkUtils::EmitBookmarkWithValue(const class UObject* WorldContextObject, class FName Tag, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBookmarkUtils", "EmitBookmarkWithValue");

	Params::GbxBookmarkUtils_EmitBookmarkWithValue Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Tag = Tag;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxBookmarkUtils.EmitBookmarkWithValueAndLoc
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Tag                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   loc                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxBookmarkUtils::EmitBookmarkWithValueAndLoc(const class UObject* WorldContextObject, class FName Tag, const class FString& Value, const struct FVector& loc)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxBookmarkUtils", "EmitBookmarkWithValueAndLoc");

	Params::GbxBookmarkUtils_EmitBookmarkWithValueAndLoc Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Tag = Tag;
	Parms.Value = std::move(Value);
	Parms.loc = std::move(loc);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxDataTableFunctionLibrary.Conv_DataTableValueHandleToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableValueHandle&     ValueHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxDataTableFunctionLibrary::Conv_DataTableValueHandleToString(const struct FDataTableValueHandle& ValueHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxDataTableFunctionLibrary", "Conv_DataTableValueHandleToString");

	Params::GbxDataTableFunctionLibrary_Conv_DataTableValueHandleToString Parms{};

	Parms.ValueHandle = std::move(ValueHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxDataTableFunctionLibrary.GetDataTableValueFromHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FDataTableValueHandle&     ValueHandle                                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UObject*                          ContextSource                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxDataTableFunctionLibrary::GetDataTableValueFromHandle(const struct FDataTableValueHandle& ValueHandle, class UObject* ContextSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxDataTableFunctionLibrary", "GetDataTableValueFromHandle");

	Params::GbxDataTableFunctionLibrary_GetDataTableValueFromHandle Parms{};

	Parms.ValueHandle = std::move(ValueHandle);
	Parms.ContextSource = ContextSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxEngineAnimInstance.OnAnimAssetsLoaded
// (Event, Public, BlueprintEvent)

void UGbxEngineAnimInstance::OnAnimAssetsLoaded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxEngineAnimInstance", "OnAnimAssetsLoaded");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxEngine.GbxEngineAnimInstance.GbxAllSlotsActive
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FName>&              SlotNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxEngineAnimInstance::GbxAllSlotsActive(const TArray<class FName>& SlotNames) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxEngineAnimInstance", "GbxAllSlotsActive");

	Params::GbxEngineAnimInstance_GbxAllSlotsActive Parms{};

	Parms.SlotNames = std::move(SlotNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxEngineAnimInstance.GbxAnySlotActive
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FName>&              SlotNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxEngineAnimInstance::GbxAnySlotActive(const TArray<class FName>& SlotNames) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxEngineAnimInstance", "GbxAnySlotActive");

	Params::GbxEngineAnimInstance_GbxAnySlotActive Parms{};

	Parms.SlotNames = std::move(SlotNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxEngineAnimInstance.GbxIsSlotActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             SlotName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxEngineAnimInstance::GbxIsSlotActive(class FName SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxEngineAnimInstance", "GbxIsSlotActive");

	Params::GbxEngineAnimInstance_GbxIsSlotActive Parms{};

	Parms.SlotName = SlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxEngineAnimInstance.GetIsAnimSetTagValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxEngineAnimInstance::GetIsAnimSetTagValid(const struct FGameplayTag& GameplayTag) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxEngineAnimInstance", "GetIsAnimSetTagValid");

	Params::GbxEngineAnimInstance_GetIsAnimSetTagValid Parms{};

	Parms.GameplayTag = std::move(GameplayTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxEngineAnimInstance.GetSlotWeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             SlotName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxEngineAnimInstance::GetSlotWeight(class FName SlotName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxEngineAnimInstance", "GetSlotWeight");

	Params::GbxEngineAnimInstance_GetSlotWeight Parms{};

	Parms.SlotName = SlotName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxEngineBlueprintLibrary.Conv_BoolToName
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    InBool                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxEngineBlueprintLibrary::Conv_BoolToName(bool InBool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxEngineBlueprintLibrary", "Conv_BoolToName");

	Params::GbxEngineBlueprintLibrary_Conv_BoolToName Parms{};

	Parms.InBool = InBool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxEngineBlueprintLibrary.FlushNexusLayers
// (Final, Native, Static, Public, BlueprintCallable)

void UGbxEngineBlueprintLibrary::FlushNexusLayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxEngineBlueprintLibrary", "FlushNexusLayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxEngineBlueprintLibrary.GetStaticMeshSocketTransform
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UStaticMesh*                      Mesh                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UGbxEngineBlueprintLibrary::GetStaticMeshSocketTransform(class UStaticMesh* Mesh, class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxEngineBlueprintLibrary", "GetStaticMeshSocketTransform");

	Params::GbxEngineBlueprintLibrary_GetStaticMeshSocketTransform Parms{};

	Parms.Mesh = Mesh;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxEngineBlueprintLibrary.LoadNexusContentForActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxEngineBlueprintLibrary::LoadNexusContentForActor(class UObject* WorldContext, const struct FLatentActionInfo& LatentInfo, class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxEngineBlueprintLibrary", "LoadNexusContentForActor");

	Params::GbxEngineBlueprintLibrary_LoadNexusContentForActor Parms{};

	Parms.WorldContext = WorldContext;
	Parms.LatentInfo = std::move(LatentInfo);
	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxEngineBlueprintLibrary.ScriptQueryInterface
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class IInterface>           InterfaceClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EQueryInterfaceExec*                    Exec                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IInterface>      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IInterface> UGbxEngineBlueprintLibrary::ScriptQueryInterface(class UObject* Object, TSubclassOf<class IInterface> InterfaceClass, EQueryInterfaceExec* Exec)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxEngineBlueprintLibrary", "ScriptQueryInterface");

	Params::GbxEngineBlueprintLibrary_ScriptQueryInterface Parms{};

	Parms.Object = Object;
	Parms.InterfaceClass = InterfaceClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Exec != nullptr)
		*Exec = Parms.Exec;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxEngineBlueprintLibrary.SetGameplayDebuggerActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxEngineBlueprintLibrary::SetGameplayDebuggerActor(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxEngineBlueprintLibrary", "SetGameplayDebuggerActor");

	Params::GbxEngineBlueprintLibrary_SetGameplayDebuggerActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxEngineBlueprintLibrary.SetGameplayDebuggerCategory
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             categoryname                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxEngineBlueprintLibrary::SetGameplayDebuggerCategory(class UObject* WorldContext, class FName categoryname, bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxEngineBlueprintLibrary", "SetGameplayDebuggerCategory");

	Params::GbxEngineBlueprintLibrary_SetGameplayDebuggerCategory Parms{};

	Parms.WorldContext = WorldContext;
	Parms.categoryname = categoryname;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxEngineBlueprintLibrary.SetNexusLayerEnabled
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             LayerName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFlush                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxEngineBlueprintLibrary::SetNexusLayerEnabled(class FName LayerName, bool bEnabled, bool bFlush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxEngineBlueprintLibrary", "SetNexusLayerEnabled");

	Params::GbxEngineBlueprintLibrary_SetNexusLayerEnabled Parms{};

	Parms.LayerName = LayerName;
	Parms.bEnabled = bEnabled;
	Parms.bFlush = bFlush;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxEngineBlueprintLibrary.WaitForActorBeginPlay
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)
// class AActor**                          OutActor                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxEngineBlueprintLibrary::WaitForActorBeginPlay(class AActor* Actor, const struct FLatentActionInfo& LatentInfo, class AActor** OutActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxEngineBlueprintLibrary", "WaitForActorBeginPlay");

	Params::GbxEngineBlueprintLibrary_WaitForActorBeginPlay Parms{};

	Parms.Actor = Actor;
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutActor != nullptr)
		*OutActor = Parms.OutActor;
}


// Function GbxEngine.GbxEngineTestActor.OnRep_IsActive
// (Final, Native, Private)

void AGbxEngineTestActor::OnRep_IsActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxEngineTestActor", "OnRep_IsActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxEngineTestActor.SetFailed
// (Final, Native, Public, BlueprintCallable)

void AGbxEngineTestActor::SetFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxEngineTestActor", "SetFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxEngineTestActor.SetSucceeded
// (Final, Native, Public, BlueprintCallable)

void AGbxEngineTestActor::SetSucceeded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxEngineTestActor", "SetSucceeded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxEngineTestActor.Start
// (Native, Public, BlueprintCallable)

void AGbxEngineTestActor::Start()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxEngineTestActor", "Start");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxGraphFunctionLibrary.BreakGbxGraphParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxGraphParam&            GraphParam                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName*                            Name_0                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam*                       Param                                                  (Parm, OutParm, NativeAccessSpecifierPublic)

void UGbxGraphFunctionLibrary::BreakGbxGraphParam(const struct FGbxGraphParam& GraphParam, class FName* Name_0, struct FGbxParam* Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGraphFunctionLibrary", "BreakGbxGraphParam");

	Params::GbxGraphFunctionLibrary_BreakGbxGraphParam Parms{};

	Parms.GraphParam = std::move(GraphParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Name_0 != nullptr)
		*Name_0 = Parms.Name_0;

	if (Param != nullptr)
		*Param = std::move(Parms.Param);
}


// Function GbxEngine.GbxGraphFunctionLibrary.MakeGbxGraphParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGbxGraphParam                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxGraphParam UGbxGraphFunctionLibrary::MakeGbxGraphParam(const class FName& Name_0, const struct FGbxParam& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGraphFunctionLibrary", "MakeGbxGraphParam");

	Params::GbxGraphFunctionLibrary_MakeGbxGraphParam Parms{};

	Parms.Name_0 = Name_0;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxGraphFunctionLibrary.MakeGbxGraphParamFromString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      Name_0                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    Param                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxGraphParam                   ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxGraphParam UGbxGraphFunctionLibrary::MakeGbxGraphParamFromString(const class FName& Name_0, const class FString& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxGraphFunctionLibrary", "MakeGbxGraphParamFromString");

	Params::GbxGraphFunctionLibrary_MakeGbxGraphParamFromString Parms{};

	Parms.Name_0 = Name_0;
	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxLoadingRangeOverride.PopLoadingRangeOverridePreset
// (Final, Native, Public, BlueprintCallable)

void UGbxLoadingRangeOverride::PopLoadingRangeOverridePreset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxLoadingRangeOverride", "PopLoadingRangeOverridePreset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxLoadingRangeOverride.PushLoadingRangeOverridePreset
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FName&                      Preset                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class FString&                    reason                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxLoadingRangeOverride::PushLoadingRangeOverridePreset(const class FName& Preset, const class FString& reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxLoadingRangeOverride", "PushLoadingRangeOverridePreset");

	Params::GbxLoadingRangeOverride_PushLoadingRangeOverridePreset Parms{};

	Parms.Preset = Preset;
	Parms.reason = std::move(reason);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_ActorToGbxParam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_ActorToGbxParam(class AActor* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_ActorToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_ActorToGbxParam Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_AttributeToGbxParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const FGameDataHandleProperty_&         Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_AttributeToGbxParam(const FGameDataHandleProperty_& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_AttributeToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_AttributeToGbxParam Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_BlackboardEntryToGbxParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxBlackboardEntryRef&    Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_BlackboardEntryToGbxParam(const struct FGbxBlackboardEntryRef& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_BlackboardEntryToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_BlackboardEntryToGbxParam Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_BoolToGbxParam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_BoolToGbxParam(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_BoolToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_BoolToGbxParam Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_DoubleToGbxParam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// double                                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_DoubleToGbxParam(double Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_DoubleToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_DoubleToGbxParam Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_FloatToGbxParam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_FloatToGbxParam(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_FloatToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_FloatToGbxParam Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_GameplayTagToGbxParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGameplayTag&              Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_GameplayTagToGbxParam(const struct FGameplayTag& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_GameplayTagToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_GameplayTagToGbxParam Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_GbxDefToGbxParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const FGbxDefPtrProperty_&              Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_GbxDefToGbxParam(const FGbxDefPtrProperty_& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_GbxDefToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_GbxDefToGbxParam Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_GbxParamToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 GbxParam                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxParamBlueprintLibrary::Conv_GbxParamToString(const struct FGbxParam& GbxParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_GbxParamToString");

	Params::GbxParamBlueprintLibrary_Conv_GbxParamToString Parms{};

	Parms.GbxParam = std::move(GbxParam);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_HitResultToGbxParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FHitResult&                Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_HitResultToGbxParam(const struct FHitResult& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_HitResultToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_HitResultToGbxParam Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_IntToGbxParam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_IntToGbxParam(int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_IntToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_IntToGbxParam Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_LinearColorToGbxParam
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FLinearColor&              Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_LinearColorToGbxParam(const struct FLinearColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_LinearColorToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_LinearColorToGbxParam Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_NameToGbxParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FName&                      Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_NameToGbxParam(const class FName& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_NameToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_NameToGbxParam Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_NumericRangeToGbxParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FNumericRange&             Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_NumericRangeToGbxParam(const struct FNumericRange& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_NumericRangeToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_NumericRangeToGbxParam Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_ObjectToGbxParam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          Value                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_ObjectToGbxParam(class UObject* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_ObjectToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_ObjectToGbxParam Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_RotatorToGbxParam
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FRotator&                  Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_RotatorToGbxParam(const struct FRotator& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_RotatorToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_RotatorToGbxParam Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_SceneComponentToGbxParam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class USceneComponent*                  Value                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_SceneComponentToGbxParam(class USceneComponent* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_SceneComponentToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_SceneComponentToGbxParam Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_SoftObjectPtrToGbxParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const TSoftObjectPtr<class UObject>&    Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_SoftObjectPtrToGbxParam(const TSoftObjectPtr<class UObject>& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_SoftObjectPtrToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_SoftObjectPtrToGbxParam Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_StringToGbxParam
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_StringToGbxParam(const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_StringToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_StringToGbxParam Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_TextToGbxParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FText&                      Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_TextToGbxParam(const class FText& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_TextToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_TextToGbxParam Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Conv_VectorToGbxParam
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FVector&                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::Conv_VectorToGbxParam(const struct FVector& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Conv_VectorToGbxParam");

	Params::GbxParamBlueprintLibrary_Conv_VectorToGbxParam Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.GetGbxParam_Double
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 GbxParam                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UObject*                    Context                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGbxParamBlueprintLibrary::GetGbxParam_Double(const struct FGbxParam& GbxParam, const class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "GetGbxParam_Double");

	Params::GbxParamBlueprintLibrary_GetGbxParam_Double Parms{};

	Parms.GbxParam = std::move(GbxParam);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.GetGbxParam_Float
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 GbxParam                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UObject*                    Context                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxParamBlueprintLibrary::GetGbxParam_Float(const struct FGbxParam& GbxParam, const class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "GetGbxParam_Float");

	Params::GbxParamBlueprintLibrary_GetGbxParam_Float Parms{};

	Parms.GbxParam = std::move(GbxParam);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.GetGbxParam_Int
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 GbxParam                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UObject*                    Context                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxParamBlueprintLibrary::GetGbxParam_Int(const struct FGbxParam& GbxParam, const class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "GetGbxParam_Int");

	Params::GbxParamBlueprintLibrary_GetGbxParam_Int Parms{};

	Parms.GbxParam = std::move(GbxParam);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.GetRelativeDirection
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxRelativeRotation&      Direction                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxParamBlueprintLibrary::GetRelativeDirection(class AActor* Actor, const struct FGbxRelativeRotation& Direction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "GetRelativeDirection");

	Params::GbxParamBlueprintLibrary_GetRelativeDirection Parms{};

	Parms.Actor = Actor;
	Parms.Direction = std::move(Direction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.GetRelativeLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxRelativeLocation&      Location                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxParamBlueprintLibrary::GetRelativeLocation(class AActor* Actor, const struct FGbxRelativeLocation& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "GetRelativeLocation");

	Params::GbxParamBlueprintLibrary_GetRelativeLocation Parms{};

	Parms.Actor = Actor;
	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.GetRelativeRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxRelativeRotation&      Rotation                                               (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGbxParamBlueprintLibrary::GetRelativeRotation(class AActor* Actor, const struct FGbxRelativeRotation& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "GetRelativeRotation");

	Params::GbxParamBlueprintLibrary_GetRelativeRotation Parms{};

	Parms.Actor = Actor;
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.GetRelativeVelocity
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxRelativeRotation&      Direction                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   speed                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxParamBlueprintLibrary::GetRelativeVelocity(class AActor* Actor, const struct FGbxRelativeRotation& Direction, float speed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "GetRelativeVelocity");

	Params::GbxParamBlueprintLibrary_GetRelativeVelocity Parms{};

	Parms.Actor = Actor;
	Parms.Direction = std::move(Direction);
	Parms.speed = speed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.GetSummary_GbxParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxParamBlueprintLibrary::GetSummary_GbxParam(const struct FGbxParam& Param)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "GetSummary_GbxParam");

	Params::GbxParamBlueprintLibrary_GetSummary_GbxParam Parms{};

	Parms.Param = std::move(Param);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.MakeGbxParamFromString
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class FString&                    String                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxParam                        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxParam UGbxParamBlueprintLibrary::MakeGbxParamFromString(const class FString& String)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "MakeGbxParamFromString");

	Params::GbxParamBlueprintLibrary_MakeGbxParamFromString Parms{};

	Parms.String = std::move(String);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.MakeRelativeLocation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EGbxRelativeLocationType                type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             socket                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxRelativeRotation&      OffsetDirection                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   OffsetDistance                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   OffsetVector                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxRelativeLocation             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGbxRelativeLocation UGbxParamBlueprintLibrary::MakeRelativeLocation(EGbxRelativeLocationType type, class FName socket, const struct FGbxRelativeRotation& OffsetDirection, float OffsetDistance, const struct FVector& OffsetVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "MakeRelativeLocation");

	Params::GbxParamBlueprintLibrary_MakeRelativeLocation Parms{};

	Parms.type = type;
	Parms.socket = socket;
	Parms.OffsetDirection = std::move(OffsetDirection);
	Parms.OffsetDistance = OffsetDistance;
	Parms.OffsetVector = std::move(OffsetVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.MakeRelativeRotation
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// EGbxRelativeRotationType                type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGbxRelativeRotationModifier            Modifier                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator&                  Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ConeAroundDirection                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             socket                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxRelativeRotation             ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGbxRelativeRotation UGbxParamBlueprintLibrary::MakeRelativeRotation(EGbxRelativeRotationType type, EGbxRelativeRotationModifier Modifier, const struct FRotator& Offset, float ConeAroundDirection, class FName socket)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "MakeRelativeRotation");

	Params::GbxParamBlueprintLibrary_MakeRelativeRotation Parms{};

	Parms.type = type;
	Parms.Modifier = Modifier;
	Parms.Offset = std::move(Offset);
	Parms.ConeAroundDirection = ConeAroundDirection;
	Parms.socket = socket;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class UObject*                    Context                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32*                                  Value                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxParamBlueprintLibrary::Resolve(const struct FGbxParam& Param, const class UObject* Context, int32* Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve");

	Params::GbxParamBlueprintLibrary_Resolve Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Value != nullptr)
		*Value = Parms.Value;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_Actor
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* UGbxParamBlueprintLibrary::Resolve_Actor(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_Actor");

	Params::GbxParamBlueprintLibrary_Resolve_Actor Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_Bool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxParamBlueprintLibrary::Resolve_Bool(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_Bool");

	Params::GbxParamBlueprintLibrary_Resolve_Bool Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_Double
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double UGbxParamBlueprintLibrary::Resolve_Double(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_Double");

	Params::GbxParamBlueprintLibrary_Resolve_Double Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_Float
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxParamBlueprintLibrary::Resolve_Float(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_Float");

	Params::GbxParamBlueprintLibrary_Resolve_Float Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_GameplayTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UGbxParamBlueprintLibrary::Resolve_GameplayTag(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_GameplayTag");

	Params::GbxParamBlueprintLibrary_Resolve_GameplayTag Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_GbxDef
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

FGbxDefPtrProperty_ UGbxParamBlueprintLibrary::Resolve_GbxDef(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_GbxDef");

	Params::GbxParamBlueprintLibrary_Resolve_GbxDef Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_Int
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxParamBlueprintLibrary::Resolve_Int(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_Int");

	Params::GbxParamBlueprintLibrary_Resolve_Int Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_Name
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxParamBlueprintLibrary::Resolve_Name(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_Name");

	Params::GbxParamBlueprintLibrary_Resolve_Name Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_NumericRange
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNumericRange                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FNumericRange UGbxParamBlueprintLibrary::Resolve_NumericRange(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_NumericRange");

	Params::GbxParamBlueprintLibrary_Resolve_NumericRange Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_Object
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UGbxParamBlueprintLibrary::Resolve_Object(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_Object");

	Params::GbxParamBlueprintLibrary_Resolve_Object Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_Rotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UGbxParamBlueprintLibrary::Resolve_Rotator(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_Rotator");

	Params::GbxParamBlueprintLibrary_Resolve_Rotator Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_SceneComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* UGbxParamBlueprintLibrary::Resolve_SceneComponent(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_SceneComponent");

	Params::GbxParamBlueprintLibrary_Resolve_SceneComponent Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_SoftObjectPtr
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UObject>           ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UObject> UGbxParamBlueprintLibrary::Resolve_SoftObjectPtr(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_SoftObjectPtr");

	Params::GbxParamBlueprintLibrary_Resolve_SoftObjectPtr Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_String
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxParamBlueprintLibrary::Resolve_String(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_String");

	Params::GbxParamBlueprintLibrary_Resolve_String Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_Text
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UGbxParamBlueprintLibrary::Resolve_Text(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_Text");

	Params::GbxParamBlueprintLibrary_Resolve_Text Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.Resolve_Vector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxParam&                 Param                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Context                                                (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxParamBlueprintLibrary::Resolve_Vector(const struct FGbxParam& Param, class UObject* Context)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "Resolve_Vector");

	Params::GbxParamBlueprintLibrary_Resolve_Vector Parms{};

	Parms.Param = std::move(Param);
	Parms.Context = Context;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.GbxParamBlueprintLibrary.SetGbxParam_Double
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxParam&                       GbxParam                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// double                                  DoubleValue                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxParamBlueprintLibrary::SetGbxParam_Double(struct FGbxParam& GbxParam, double DoubleValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "SetGbxParam_Double");

	Params::GbxParamBlueprintLibrary_SetGbxParam_Double Parms{};

	Parms.GbxParam = std::move(GbxParam);
	Parms.DoubleValue = DoubleValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GbxParam = std::move(Parms.GbxParam);
}


// Function GbxEngine.GbxParamBlueprintLibrary.SetGbxParam_Float
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxParam&                       GbxParam                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   FloatValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxParamBlueprintLibrary::SetGbxParam_Float(struct FGbxParam& GbxParam, float FloatValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "SetGbxParam_Float");

	Params::GbxParamBlueprintLibrary_SetGbxParam_Float Parms{};

	Parms.GbxParam = std::move(GbxParam);
	Parms.FloatValue = FloatValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GbxParam = std::move(Parms.GbxParam);
}


// Function GbxEngine.GbxParamBlueprintLibrary.SetGbxParam_Int
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGbxParam&                       GbxParam                                               (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   IntValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxParamBlueprintLibrary::SetGbxParam_Int(struct FGbxParam& GbxParam, int32 IntValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxParamBlueprintLibrary", "SetGbxParam_Int");

	Params::GbxParamBlueprintLibrary_SetGbxParam_Int Parms{};

	Parms.GbxParam = std::move(GbxParam);
	Parms.IntValue = IntValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GbxParam = std::move(Parms.GbxParam);
}


// Function GbxEngine.GbxBPSceneComponentResolver.K2_Resolve
// (Event, Protected, BlueprintEvent, Const)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* UGbxBPSceneComponentResolver::K2_Resolve(class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxBPSceneComponentResolver", "K2_Resolve");

	Params::GbxBPSceneComponentResolver_K2_Resolve Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function GbxEngine.NumericRangeExt.CreateNumericRange
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Variance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNumericRange                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FNumericRange UNumericRangeExt::CreateNumericRange(float Value, float Variance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "CreateNumericRange");

	Params::NumericRangeExt_CreateNumericRange Parms{};

	Parms.Value = Value;
	Parms.Variance = Variance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.NumericRangeExt.CreateNumericRangeMinMax
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// float                                   Minimum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Maximum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNumericRange                    ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FNumericRange UNumericRangeExt::CreateNumericRangeMinMax(float Minimum, float Maximum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "CreateNumericRangeMinMax");

	Params::NumericRangeExt_CreateNumericRangeMinMax Parms{};

	Parms.Minimum = Minimum;
	Parms.Maximum = Maximum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.NumericRangeExt.GenerateRandomNumber
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FNumericRange&             Range                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNumericRangeExt::GenerateRandomNumber(const struct FNumericRange& Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "GenerateRandomNumber");

	Params::NumericRangeExt_GenerateRandomNumber Parms{};

	Parms.Range = std::move(Range);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.NumericRangeExt.GetMaximum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FNumericRange&             Range                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNumericRangeExt::GetMaximum(const struct FNumericRange& Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "GetMaximum");

	Params::NumericRangeExt_GetMaximum Parms{};

	Parms.Range = std::move(Range);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.NumericRangeExt.GetMinimum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FNumericRange&             Range                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNumericRangeExt::GetMinimum(const struct FNumericRange& Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "GetMinimum");

	Params::NumericRangeExt_GetMinimum Parms{};

	Parms.Range = std::move(Range);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.NumericRangeExt.IsWithin
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FNumericRange&             Range                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNumericRangeExt::IsWithin(const struct FNumericRange& Range, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "IsWithin");

	Params::NumericRangeExt_IsWithin Parms{};

	Parms.Range = std::move(Range);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.NumericRangeExt.SetMaximum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNumericRange*                   Range                                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Maximum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNumericRangeExt::SetMaximum(struct FNumericRange* Range, float Maximum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "SetMaximum");

	Params::NumericRangeExt_SetMaximum Parms{};

	Parms.Maximum = Maximum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Range != nullptr)
		*Range = std::move(Parms.Range);
}


// Function GbxEngine.NumericRangeExt.SetMinimum
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FNumericRange*                   Range                                                  (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   Minimum                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNumericRangeExt::SetMinimum(struct FNumericRange* Range, float Minimum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "SetMinimum");

	Params::NumericRangeExt_SetMinimum Parms{};

	Parms.Minimum = Minimum;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Range != nullptr)
		*Range = std::move(Parms.Range);
}


// Function GbxEngine.NumericRangeExt.ToMinMaxString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FNumericRange&             Range                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNumericRangeExt::ToMinMaxString(const struct FNumericRange& Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "ToMinMaxString");

	Params::NumericRangeExt_ToMinMaxString Parms{};

	Parms.Range = std::move(Range);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.NumericRangeExt.ToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FNumericRange&             Range                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNumericRangeExt::ToString(const struct FNumericRange& Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "ToString");

	Params::NumericRangeExt_ToString Parms{};

	Parms.Range = std::move(Range);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.NumericRangeExt.ToValueString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FNumericRange&             Range                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNumericRangeExt::ToValueString(const struct FNumericRange& Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "ToValueString");

	Params::NumericRangeExt_ToValueString Parms{};

	Parms.Range = std::move(Range);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxEngine.NumericRangeExt.ToValueVarianceString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FNumericRange&             Range                                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNumericRangeExt::ToValueVarianceString(const struct FNumericRange& Range)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NumericRangeExt", "ToValueVarianceString");

	Params::NumericRangeExt_ToValueVarianceString Parms{};

	Parms.Range = std::move(Range);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

