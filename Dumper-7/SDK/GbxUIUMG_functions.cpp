#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxUIUMG

#include "Basic.hpp"

#include "GbxUIUMG_classes.hpp"
#include "GbxUIUMG_parameters.hpp"


namespace SDK
{

// Function GbxUIUMG.AsyncAction_CreateWidgetAsync.CreateWidgetAsync
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             UserWidgetSoftClass                                    (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuspendInputUntilComplete                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncAction_CreateWidgetAsync*   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_CreateWidgetAsync* UAsyncAction_CreateWidgetAsync::CreateWidgetAsync(class UObject* WorldContextObject, TSoftClassPtr<class UClass> UserWidgetSoftClass, class APlayerController* OwningPlayer, bool bSuspendInputUntilComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncAction_CreateWidgetAsync", "CreateWidgetAsync");

	Params::AsyncAction_CreateWidgetAsync_CreateWidgetAsync Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.UserWidgetSoftClass = UserWidgetSoftClass;
	Parms.OwningPlayer = OwningPlayer;
	Parms.bSuspendInputUntilComplete = bSuspendInputUntilComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.AsyncAction_PushContentToLayerForPlayer.PushContentToLayerForPlayer
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                OwningPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             WidgetClass                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              LayerName                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSuspendInputUntilComplete                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAsyncAction_PushContentToLayerForPlayer*ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAsyncAction_PushContentToLayerForPlayer* UAsyncAction_PushContentToLayerForPlayer::PushContentToLayerForPlayer(class APlayerController* OwningPlayer, TSoftClassPtr<class UClass> WidgetClass, const struct FGameplayTag& LayerName, bool bSuspendInputUntilComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AsyncAction_PushContentToLayerForPlayer", "PushContentToLayerForPlayer");

	Params::AsyncAction_PushContentToLayerForPlayer_PushContentToLayerForPlayer Parms{};

	Parms.OwningPlayer = OwningPlayer;
	Parms.WidgetClass = WidgetClass;
	Parms.LayerName = std::move(LayerName);
	Parms.bSuspendInputUntilComplete = bSuspendInputUntilComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.CommonUIExtensions.GetLocalPlayerFromController
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULocalPlayer*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULocalPlayer* UCommonUIExtensions::GetLocalPlayerFromController(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonUIExtensions", "GetLocalPlayerFromController");

	Params::CommonUIExtensions_GetLocalPlayerFromController Parms{};

	Parms.PlayerController = PlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.CommonUIExtensions.GetOwningPlayerInputType
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UUserWidget*                WidgetContextObject                                    (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECommonInputType                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ECommonInputType UCommonUIExtensions::GetOwningPlayerInputType(const class UUserWidget* WidgetContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonUIExtensions", "GetOwningPlayerInputType");

	Params::CommonUIExtensions_GetOwningPlayerInputType Parms{};

	Parms.WidgetContextObject = WidgetContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.CommonUIExtensions.IsOwningPlayerUsingGamepad
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UUserWidget*                WidgetContextObject                                    (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCommonUIExtensions::IsOwningPlayerUsingGamepad(const class UUserWidget* WidgetContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonUIExtensions", "IsOwningPlayerUsingGamepad");

	Params::CommonUIExtensions_IsOwningPlayerUsingGamepad Parms{};

	Parms.WidgetContextObject = WidgetContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.CommonUIExtensions.IsOwningPlayerUsingTouch
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const class UUserWidget*                WidgetContextObject                                    (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UCommonUIExtensions::IsOwningPlayerUsingTouch(const class UUserWidget* WidgetContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonUIExtensions", "IsOwningPlayerUsingTouch");

	Params::CommonUIExtensions_IsOwningPlayerUsingTouch Parms{};

	Parms.WidgetContextObject = WidgetContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.CommonUIExtensions.PopContentFromLayer
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UCommonActivatableWidget*         ActivatableWidget                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCommonUIExtensions::PopContentFromLayer(class UCommonActivatableWidget* ActivatableWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonUIExtensions", "PopContentFromLayer");

	Params::CommonUIExtensions_PopContentFromLayer Parms{};

	Parms.ActivatableWidget = ActivatableWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.CommonUIExtensions.PushContentToLayer_ForPlayer
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class ULocalPlayer*               LocalPlayer                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              LayerName                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UCommonActivatableWidget>WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCommonActivatableWidget*         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UCommonActivatableWidget* UCommonUIExtensions::PushContentToLayer_ForPlayer(const class ULocalPlayer* LocalPlayer, const struct FGameplayTag& LayerName, TSubclassOf<class UCommonActivatableWidget> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonUIExtensions", "PushContentToLayer_ForPlayer");

	Params::CommonUIExtensions_PushContentToLayer_ForPlayer Parms{};

	Parms.LocalPlayer = LocalPlayer;
	Parms.LayerName = std::move(LayerName);
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.CommonUIExtensions.PushStreamedContentToLayer_ForPlayer
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class ULocalPlayer*               LocalPlayer                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              LayerName                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             WidgetClass                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCommonUIExtensions::PushStreamedContentToLayer_ForPlayer(const class ULocalPlayer* LocalPlayer, const struct FGameplayTag& LayerName, TSoftClassPtr<class UClass> WidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonUIExtensions", "PushStreamedContentToLayer_ForPlayer");

	Params::CommonUIExtensions_PushStreamedContentToLayer_ForPlayer Parms{};

	Parms.LocalPlayer = LocalPlayer;
	Parms.LayerName = std::move(LayerName);
	Parms.WidgetClass = WidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.CommonUIExtensions.ResumeInputForPlayer
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SuspendToken                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCommonUIExtensions::ResumeInputForPlayer(class APlayerController* PlayerController, class FName SuspendToken)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonUIExtensions", "ResumeInputForPlayer");

	Params::CommonUIExtensions_ResumeInputForPlayer Parms{};

	Parms.PlayerController = PlayerController;
	Parms.SuspendToken = SuspendToken;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.CommonUIExtensions.SuspendInputForPlayer
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class APlayerController*                PlayerController                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SuspendReason                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UCommonUIExtensions::SuspendInputForPlayer(class APlayerController* PlayerController, class FName SuspendReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("CommonUIExtensions", "SuspendInputForPlayer");

	Params::CommonUIExtensions_SuspendInputForPlayer Parms{};

	Parms.PlayerController = PlayerController;
	Parms.SuspendReason = SuspendReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGActivatableWidget.OnBoundActionButtonExecuted
// (Event, Public, BlueprintEvent)

void UGbxUIUMGActivatableWidget::OnBoundActionButtonExecuted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGActivatableWidget", "OnBoundActionButtonExecuted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUIUMG.GbxUIUMGButtonBase.SetButtonText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxUIUMGButtonBase::SetButtonText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGButtonBase", "SetButtonText");

	Params::GbxUIUMGButtonBase_SetButtonText Parms{};

	Parms.InText = std::move(InText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGButtonBase.UpdateButtonStyle
// (Event, Protected, BlueprintEvent)

void UGbxUIUMGButtonBase::UpdateButtonStyle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGButtonBase", "UpdateButtonStyle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUIUMG.GbxUIUMGButtonBase.UpdateButtonText
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const class FText&                      InText                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxUIUMGButtonBase::UpdateButtonText(const class FText& InText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGButtonBase", "UpdateButtonText");

	Params::GbxUIUMGButtonBase_UpdateButtonText Parms{};

	Parms.InText = std::move(InText);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUIUMG.GbxUIUMGButtonRemapping.SetButtonKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FKey&                      InKey                                                  (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGButtonRemapping::SetButtonKey(const struct FKey& InKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGButtonRemapping", "SetButtonKey");

	Params::GbxUIUMGButtonRemapping_SetButtonKey Parms{};

	Parms.InKey = std::move(InKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGButtonRemapping.UpdateButtonKeyBrush
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FSlateBrush&               InKeyBrush                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bEmptyBrush                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGButtonRemapping::UpdateButtonKeyBrush(const struct FSlateBrush& InKeyBrush, bool bEmptyBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGButtonRemapping", "UpdateButtonKeyBrush");

	Params::GbxUIUMGButtonRemapping_UpdateButtonKeyBrush Parms{};

	Parms.InKeyBrush = std::move(InKeyBrush);
	Parms.bEmptyBrush = bEmptyBrush;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_ActionWidget.HandleControlMappingsRebuilt
// (Final, Native, Protected)

void UGbxUIUMGEnhancedInput_ActionWidget::HandleControlMappingsRebuilt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_ActionWidget", "HandleControlMappingsRebuilt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_ActionWidget.SetForceShowHoldFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCanShow                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_ActionWidget::SetForceShowHoldFeedback(bool bCanShow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_ActionWidget", "SetForceShowHoldFeedback");

	Params::GbxUIUMGEnhancedInput_ActionWidget_SetForceShowHoldFeedback Parms{};

	Parms.bCanShow = bCanShow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_ActionWidget.SetIconRimBrush
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// const struct FSlateBrush&               InIconRimBrush                                         (Parm, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_ActionWidget::SetIconRimBrush(const struct FSlateBrush& InIconRimBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_ActionWidget", "SetIconRimBrush");

	Params::GbxUIUMGEnhancedInput_ActionWidget_SetIconRimBrush Parms{};

	Parms.InIconRimBrush = std::move(InIconRimBrush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_ActionWidget.SetIconSize
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 InIconSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_ActionWidget::SetIconSize(const struct FVector2D& InIconSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_ActionWidget", "SetIconSize");

	Params::GbxUIUMGEnhancedInput_ActionWidget_SetIconSize Parms{};

	Parms.InIconSize = std::move(InIconSize);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_ActionWidget.SetInputAction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FDataTableRowHandle&       NewInputAction                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_ActionWidget::SetInputAction(const struct FDataTableRowHandle& NewInputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_ActionWidget", "SetInputAction");

	Params::GbxUIUMGEnhancedInput_ActionWidget_SetInputAction Parms{};

	Parms.NewInputAction = std::move(NewInputAction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_ActionWidget.SetInputActions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FDataTableRowHandle>&NewInputActions                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_ActionWidget::SetInputActions(const TArray<struct FDataTableRowHandle>& NewInputActions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_ActionWidget", "SetInputActions");

	Params::GbxUIUMGEnhancedInput_ActionWidget_SetInputActions Parms{};

	Parms.NewInputActions = std::move(NewInputActions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_ActionWidget.SetProgressMaterial
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FSlateBrush&               InProgressMaterialBrush                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const class FName&                      InProgressMaterialParam                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_ActionWidget::SetProgressMaterial(const struct FSlateBrush& InProgressMaterialBrush, const class FName& InProgressMaterialParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_ActionWidget", "SetProgressMaterial");

	Params::GbxUIUMGEnhancedInput_ActionWidget_SetProgressMaterial Parms{};

	Parms.InProgressMaterialBrush = std::move(InProgressMaterialBrush);
	Parms.InProgressMaterialParam = InProgressMaterialParam;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_ActionWidget.SetProgressValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InValue                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_ActionWidget::SetProgressValue(float InValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_ActionWidget", "SetProgressValue");

	Params::GbxUIUMGEnhancedInput_ActionWidget_SetProgressValue Parms{};

	Parms.InValue = InValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_ActionWidget.GetDisplayText
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FText                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const class FText UGbxUIUMGEnhancedInput_ActionWidget::GetDisplayText() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_ActionWidget", "GetDisplayText");

	Params::GbxUIUMGEnhancedInput_ActionWidget_GetDisplayText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_ActionWidget.GetIcon
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSlateBrush                      ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FSlateBrush UGbxUIUMGEnhancedInput_ActionWidget::GetIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_ActionWidget", "GetIcon");

	Params::GbxUIUMGEnhancedInput_ActionWidget_GetIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.BP_OnActionCancelled
// (Event, Protected, BlueprintEvent)

void UGbxUIUMGEnhancedInput_BoundActionButton::BP_OnActionCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "BP_OnActionCancelled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.BP_OnActionComplete
// (Event, Protected, BlueprintEvent)

void UGbxUIUMGEnhancedInput_BoundActionButton::BP_OnActionComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "BP_OnActionComplete");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.BP_OnActionProgress
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   HeldPercent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_BoundActionButton::BP_OnActionProgress(float HeldPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "BP_OnActionProgress");

	Params::GbxUIUMGEnhancedInput_BoundActionButton_BP_OnActionProgress Parms{};

	Parms.HeldPercent = HeldPercent;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.BP_OnUpdateInputAction
// (Event, Protected, BlueprintEvent)

void UGbxUIUMGEnhancedInput_BoundActionButton::BP_OnUpdateInputAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "BP_OnUpdateInputAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.HandleControlMappingsRebuilt
// (Final, Native, Protected)

void UGbxUIUMGEnhancedInput_BoundActionButton::HandleControlMappingsRebuilt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "HandleControlMappingsRebuilt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.NativeOnActionCancelled
// (Native, Protected)

void UGbxUIUMGEnhancedInput_BoundActionButton::NativeOnActionCancelled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "NativeOnActionCancelled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.NativeOnActionComplete
// (Native, Protected)

void UGbxUIUMGEnhancedInput_BoundActionButton::NativeOnActionComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "NativeOnActionComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.NativeOnActionProgress
// (Native, Protected)
// Parameters:
// float                                   HeldPercent                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_BoundActionButton::NativeOnActionProgress(float HeldPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "NativeOnActionProgress");

	Params::GbxUIUMGEnhancedInput_BoundActionButton_NativeOnActionProgress Parms{};

	Parms.HeldPercent = HeldPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.ResetProgressValue
// (Final, Native, Protected, BlueprintCallable)

void UGbxUIUMGEnhancedInput_BoundActionButton::ResetProgressValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "ResetProgressValue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.SetInputAction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FDataTableRowHandle&       NewInputAction                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_BoundActionButton::SetInputAction(const struct FDataTableRowHandle& NewInputAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "SetInputAction");

	Params::GbxUIUMGEnhancedInput_BoundActionButton_SetInputAction Parms{};

	Parms.NewInputAction = std::move(NewInputAction);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.SetInputActions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<struct FDataTableRowHandle>&NewInputActions                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_BoundActionButton::SetInputActions(const TArray<struct FDataTableRowHandle>& NewInputActions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "SetInputActions");

	Params::GbxUIUMGEnhancedInput_BoundActionButton_SetInputActions Parms{};

	Parms.NewInputActions = std::move(NewInputActions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGEnhancedInput_BoundActionButton.ShowHoldFeedback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bShowFeedback                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGEnhancedInput_BoundActionButton::ShowHoldFeedback(bool bShowFeedback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGEnhancedInput_BoundActionButton", "ShowHoldFeedback");

	Params::GbxUIUMGEnhancedInput_BoundActionButton_ShowHoldFeedback Parms{};

	Parms.bShowFeedback = bShowFeedback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGExtensionPointWidget.OnWidgetDeactivated
// (Final, Native, Private)
// Parameters:
// class UGbxUIUMGActivatableWidget*       Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGExtensionPointWidget::OnWidgetDeactivated(class UGbxUIUMGActivatableWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGExtensionPointWidget", "OnWidgetDeactivated");

	Params::GbxUIUMGExtensionPointWidget_OnWidgetDeactivated Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorManager.AddIndicator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxUIUMGIndicatorDescriptor*     IndicatorDescriptor                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorManager::AddIndicator(class UGbxUIUMGIndicatorDescriptor* IndicatorDescriptor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorManager", "AddIndicator");

	Params::GbxUIUMGIndicatorManager_AddIndicator Parms{};

	Parms.IndicatorDescriptor = IndicatorDescriptor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorManager.RemoveIndicator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxUIUMGIndicatorDescriptor*     IndicatorDescriptor                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorManager::RemoveIndicator(class UGbxUIUMGIndicatorDescriptor* IndicatorDescriptor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorManager", "RemoveIndicator");

	Params::GbxUIUMGIndicatorManager_RemoveIndicator Parms{};

	Parms.IndicatorDescriptor = IndicatorDescriptor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorWidget.BP_BindIndicator
// (Event, Public, BlueprintEvent)
// Parameters:
// const class UGbxUIUMGIndicatorDescriptor*Indicator                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxUIUMGIndicatorWidget::BP_BindIndicator(const class UGbxUIUMGIndicatorDescriptor* Indicator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxUIUMGIndicatorWidget", "BP_BindIndicator");

	Params::GbxUIUMGIndicatorWidget_BP_BindIndicator Parms{};

	Parms.Indicator = Indicator;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function GbxUIUMG.GbxUIUMGIndicatorWidget.BP_UnbindIndicator
// (Event, Public, BlueprintEvent)
// Parameters:
// const class UGbxUIUMGIndicatorDescriptor*Indicator                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxUIUMGIndicatorWidget::BP_UnbindIndicator(const class UGbxUIUMGIndicatorDescriptor* Indicator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxUIUMGIndicatorWidget", "BP_UnbindIndicator");

	Params::GbxUIUMGIndicatorWidget_BP_UnbindIndicator Parms{};

	Parms.Indicator = Indicator;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function GbxUIUMG.GbxUIUMGListViewItemWidget.BP_OnPrimaryAction
// (Event, Protected, BlueprintEvent)

void UGbxUIUMGListViewItemWidget::BP_OnPrimaryAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGListViewItemWidget", "BP_OnPrimaryAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUIUMG.GbxUIUMGListViewItemWidget.BP_OnSecondaryAction
// (Event, Protected, BlueprintEvent)

void UGbxUIUMGListViewItemWidget::BP_OnSecondaryAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGListViewItemWidget", "BP_OnSecondaryAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUIUMG.GbxUIUMGListViewItemWidget.BP_OnTertiaryAction
// (Event, Protected, BlueprintEvent)

void UGbxUIUMGListViewItemWidget::BP_OnTertiaryAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGListViewItemWidget", "BP_OnTertiaryAction");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUIUMG.GbxUIUMGListViewItemWidget.OnPrimaryAction
// (Native, Protected)

void UGbxUIUMGListViewItemWidget::OnPrimaryAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGListViewItemWidget", "OnPrimaryAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGListViewItemWidget.OnSecondaryAction
// (Native, Protected)

void UGbxUIUMGListViewItemWidget::OnSecondaryAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGListViewItemWidget", "OnSecondaryAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGListViewItemWidget.OnTertiaryAction
// (Native, Protected)

void UGbxUIUMGListViewItemWidget::OnTertiaryAction()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGListViewItemWidget", "OnTertiaryAction");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGPlayerSubsystem.AddUIPrototypeWidgetToPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULocalPlayer*               LocalPlayerIn                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGPlayerSubsystem::AddUIPrototypeWidgetToPlayer(const class UObject* WorldContextObject, class UUserWidget* Widget, const class ULocalPlayer* LocalPlayerIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUIUMGPlayerSubsystem", "AddUIPrototypeWidgetToPlayer");

	Params::GbxUIUMGPlayerSubsystem_AddUIPrototypeWidgetToPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Widget = Widget;
	Parms.LocalPlayerIn = LocalPlayerIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGPlayerSubsystem.AddUIStateToPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              InState                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULocalPlayer*               LocalPlayerIn                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGPlayerSubsystem::AddUIStateToPlayer(const class UObject* WorldContextObject, const struct FGameplayTag& InState, const class ULocalPlayer* LocalPlayerIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUIUMGPlayerSubsystem", "AddUIStateToPlayer");

	Params::GbxUIUMGPlayerSubsystem_AddUIStateToPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InState = std::move(InState);
	Parms.LocalPlayerIn = LocalPlayerIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGPlayerSubsystem.RemoveUIPrototypeWidgetToPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULocalPlayer*               LocalPlayerIn                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGPlayerSubsystem::RemoveUIPrototypeWidgetToPlayer(const class UObject* WorldContextObject, class UUserWidget* Widget, const class ULocalPlayer* LocalPlayerIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUIUMGPlayerSubsystem", "RemoveUIPrototypeWidgetToPlayer");

	Params::GbxUIUMGPlayerSubsystem_RemoveUIPrototypeWidgetToPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Widget = Widget;
	Parms.LocalPlayerIn = LocalPlayerIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGPlayerSubsystem.RemoveUIStateToPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class UObject*                    WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              InState                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class ULocalPlayer*               LocalPlayerIn                                          (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGPlayerSubsystem::RemoveUIStateToPlayer(const class UObject* WorldContextObject, const struct FGameplayTag& InState, const class ULocalPlayer* LocalPlayerIn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxUIUMGPlayerSubsystem", "RemoveUIStateToPlayer");

	Params::GbxUIUMGPlayerSubsystem_RemoveUIStateToPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.InState = std::move(InState);
	Parms.LocalPlayerIn = LocalPlayerIn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGPlayerSubsystem.GetUIPrototypeContainerWidget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxUIUMGPrototypeContainerWidget*ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxUIUMGPrototypeContainerWidget* UGbxUIUMGPlayerSubsystem::GetUIPrototypeContainerWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGPlayerSubsystem", "GetUIPrototypeContainerWidget");

	Params::GbxUIUMGPlayerSubsystem_GetUIPrototypeContainerWidget Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGPlayerSubsystem.HasUIState
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FGameplayTag&              InState                                                (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGPlayerSubsystem::HasUIState(const struct FGameplayTag& InState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGPlayerSubsystem", "HasUIState");

	Params::GbxUIUMGPlayerSubsystem_HasUIState Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGPlayerSubsystem.RequestStateAdd
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const struct FGameplayTag&              InState                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGPlayerSubsystem::RequestStateAdd(const struct FGameplayTag& InState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGPlayerSubsystem", "RequestStateAdd");

	Params::GbxUIUMGPlayerSubsystem_RequestStateAdd Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGPlayerSubsystem.RequestStateRemove
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const struct FGameplayTag&              InState                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGPlayerSubsystem::RequestStateRemove(const struct FGameplayTag& InState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGPlayerSubsystem", "RequestStateRemove");

	Params::GbxUIUMGPlayerSubsystem_RequestStateRemove Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGPlayerSubsystem.RequestStateToggle
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// const struct FGameplayTag&              InState                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGPlayerSubsystem::RequestStateToggle(const struct FGameplayTag& InState) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGPlayerSubsystem", "RequestStateToggle");

	Params::GbxUIUMGPlayerSubsystem_RequestStateToggle Parms{};

	Parms.InState = std::move(InState);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGRichTextInlineWidget_Base.BP_OnInlineWidgetCreated
// (Event, Public, BlueprintEvent)

void UGbxUIUMGRichTextInlineWidget_Base::BP_OnInlineWidgetCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGRichTextInlineWidget_Base", "BP_OnInlineWidgetCreated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxUIUMG.GbxUIUMGRichTextInlineWidget_Base.BP_OnWidgetSetSize
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   WantedSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   WidthOverride                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HeightOverride                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGRichTextInlineWidget_Base::BP_OnWidgetSetSize(float WantedSize, float WidthOverride, float HeightOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGRichTextInlineWidget_Base", "BP_OnWidgetSetSize");

	Params::GbxUIUMGRichTextInlineWidget_Base_BP_OnWidgetSetSize Parms{};

	Parms.WantedSize = WantedSize;
	Parms.WidthOverride = WidthOverride;
	Parms.HeightOverride = HeightOverride;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUIUMG.GbxUIUMGRotator.BP_OnDefaultOptionSpecified
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   DefaultOptionIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGRotator::BP_OnDefaultOptionSpecified(int32 DefaultOptionIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGRotator", "BP_OnDefaultOptionSpecified");

	Params::GbxUIUMGRotator_BP_OnDefaultOptionSpecified Parms{};

	Parms.DefaultOptionIndex = DefaultOptionIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxUIUMG.GbxUIUMGTabButtonBase.SetTabLabelInfo_Implementation
// (Native, Protected, HasOutParams)
// Parameters:
// const struct FGbxUIUMGTabDescriptor&    TabLabelInfo                                           (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxUIUMGTabButtonBase::SetTabLabelInfo_Implementation(const struct FGbxUIUMGTabDescriptor& TabLabelInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGTabButtonBase", "SetTabLabelInfo_Implementation");

	Params::GbxUIUMGTabButtonBase_SetTabLabelInfo_Implementation Parms{};

	Parms.TabLabelInfo = std::move(TabLabelInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGTabButtonInterface.SetTabLabelInfo
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// const struct FGbxUIUMGTabDescriptor&    TabDescriptor                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void IGbxUIUMGTabButtonInterface::SetTabLabelInfo(const struct FGbxUIUMGTabDescriptor& TabDescriptor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxUIUMGTabButtonInterface", "SetTabLabelInfo");

	Params::GbxUIUMGTabButtonInterface_SetTabLabelInfo Parms{};

	Parms.TabDescriptor = std::move(TabDescriptor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGTabListWidgetBase.GetVisibleTabCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxUIUMGTabListWidgetBase::GetVisibleTabCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGTabListWidgetBase", "GetVisibleTabCount");

	Params::GbxUIUMGTabListWidgetBase_GetVisibleTabCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGTabListWidgetBase.IsTabVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class FName                             TabId                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGTabListWidgetBase::IsTabVisible(class FName TabId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGTabListWidgetBase", "IsTabVisible");

	Params::GbxUIUMGTabListWidgetBase_IsTabVisible Parms{};

	Parms.TabId = TabId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGTabListWidgetBase.RegisterDynamicTab
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGbxUIUMGTabDescriptor&    TabDescriptor                                          (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGTabListWidgetBase::RegisterDynamicTab(const struct FGbxUIUMGTabDescriptor& TabDescriptor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGTabListWidgetBase", "RegisterDynamicTab");

	Params::GbxUIUMGTabListWidgetBase_RegisterDynamicTab Parms{};

	Parms.TabDescriptor = std::move(TabDescriptor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGTabListWidgetBase.SetTabHiddenState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             TabNameID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bHidden                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGTabListWidgetBase::SetTabHiddenState(class FName TabNameID, bool bHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGTabListWidgetBase", "SetTabHiddenState");

	Params::GbxUIUMGTabListWidgetBase_SetTabHiddenState Parms{};

	Parms.TabNameID = TabNameID;
	Parms.bHidden = bHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGTabListWidgetBase.GetPreregisteredTabInfo
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class FName                       TabNameID                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxUIUMGTabDescriptor*          OutTabInfo                                             (Parm, OutParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGTabListWidgetBase::GetPreregisteredTabInfo(const class FName TabNameID, struct FGbxUIUMGTabDescriptor* OutTabInfo) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGTabListWidgetBase", "GetPreregisteredTabInfo");

	Params::GbxUIUMGTabListWidgetBase_GetPreregisteredTabInfo Parms{};

	Parms.TabNameID = TabNameID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTabInfo != nullptr)
		*OutTabInfo = std::move(Parms.OutTabInfo);

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGTabListWidgetBase.IsFirstTabActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGTabListWidgetBase::IsFirstTabActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGTabListWidgetBase", "IsFirstTabActive");

	Params::GbxUIUMGTabListWidgetBase_IsFirstTabActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGTabListWidgetBase.IsLastTabActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGTabListWidgetBase::IsLastTabActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGTabListWidgetBase", "IsLastTabActive");

	Params::GbxUIUMGTabListWidgetBase_IsLastTabActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGTickWidget.BP_TickWidget
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxUIUMGTickWidget::BP_TickWidget(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxUIUMGTickWidget", "BP_TickWidget");

	Params::GbxUIUMGTickWidget_BP_TickWidget Parms{};

	Parms.DeltaTime = DeltaTime;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function GbxUIUMG.GbxUIUMGViewModelWidget.CreateAndRegisterViewModel
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TSubclassOf<class UGbxUIUMGViewModel>   ViewModelClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxUIUMGViewModel*&              ViewModel                                              (Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxUIUMGViewModelWidget::CreateAndRegisterViewModel(TSubclassOf<class UGbxUIUMGViewModel> ViewModelClass, class UGbxUIUMGViewModel*& ViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxUIUMGViewModelWidget", "CreateAndRegisterViewModel");

	Params::GbxUIUMGViewModelWidget_CreateAndRegisterViewModel Parms{};

	Parms.ViewModelClass = ViewModelClass;
	Parms.ViewModel = ViewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ViewModel = Parms.ViewModel;
}


// Function GbxUIUMG.GbxUIUMGViewModelWidget.RefreshDynamicBindings
// (Native, Public, BlueprintCallable)

void IGbxUIUMGViewModelWidget::RefreshDynamicBindings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxUIUMGViewModelWidget", "RefreshDynamicBindings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGViewModelWidget.RegisterViewModel
// (Native, Public, BlueprintCallable)
// Parameters:
// class UGbxUIUMGViewModel*               ViewModel                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxUIUMGViewModelWidget::RegisterViewModel(class UGbxUIUMGViewModel* ViewModel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxUIUMGViewModelWidget", "RegisterViewModel");

	Params::GbxUIUMGViewModelWidget_RegisterViewModel Parms{};

	Parms.ViewModel = ViewModel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGWidgetFactory.FindWidgetClassForData
// (Native, Event, Public, BlueprintEvent, Const)
// Parameters:
// const class UObject*                    data                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UUserWidget> UGbxUIUMGWidgetFactory::FindWidgetClassForData(const class UObject* data) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGWidgetFactory", "FindWidgetClassForData");

	Params::GbxUIUMGWidgetFactory_FindWidgetClassForData Parms{};

	Parms.data = data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGWidget_SafeZoneEditor.RefreshResetButtonEnabled
// (Final, Native, Private, BlueprintCallable)

void UGbxUIUMGWidget_SafeZoneEditor::RefreshResetButtonEnabled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGWidget_SafeZoneEditor", "RefreshResetButtonEnabled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGWidget_Settings.ApplyChanges
// (Native, Protected, BlueprintCallable)

void UGbxUIUMGWidget_Settings::ApplyChanges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGWidget_Settings", "ApplyChanges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGWidget_Settings.AttemptToPopNavigation
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGWidget_Settings::AttemptToPopNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGWidget_Settings", "AttemptToPopNavigation");

	Params::GbxUIUMGWidget_Settings_AttemptToPopNavigation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGWidget_Settings.CancelChanges
// (Native, Protected, BlueprintCallable)

void UGbxUIUMGWidget_Settings::CancelChanges()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGWidget_Settings", "CancelChanges");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGWidget_Settings.GetSettingCollection
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             SettingDevName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   HasAnySettings                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGameSettingCollection*           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGameSettingCollection* UGbxUIUMGWidget_Settings::GetSettingCollection(class FName SettingDevName, bool* HasAnySettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGWidget_Settings", "GetSettingCollection");

	Params::GbxUIUMGWidget_Settings_GetSettingCollection Parms{};

	Parms.SettingDevName = SettingDevName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HasAnySettings != nullptr)
		*HasAnySettings = Parms.HasAnySettings;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGWidget_Settings.NavigateToSetting
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             SettingDevName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGWidget_Settings::NavigateToSetting(class FName SettingDevName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGWidget_Settings", "NavigateToSetting");

	Params::GbxUIUMGWidget_Settings_NavigateToSetting Parms{};

	Parms.SettingDevName = SettingDevName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGWidget_Settings.NavigateToSettings
// (Final, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const TArray<class FName>&              SettingDevNames                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UGbxUIUMGWidget_Settings::NavigateToSettings(const TArray<class FName>& SettingDevNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGWidget_Settings", "NavigateToSettings");

	Params::GbxUIUMGWidget_Settings_NavigateToSettings Parms{};

	Parms.SettingDevNames = std::move(SettingDevNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGWidget_Settings.OnSettingsDirtyStateChanged
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    bSettingsDirty                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGWidget_Settings::OnSettingsDirtyStateChanged(bool bSettingsDirty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGWidget_Settings", "OnSettingsDirtyStateChanged");

	Params::GbxUIUMGWidget_Settings_OnSettingsDirtyStateChanged Parms{};

	Parms.bSettingsDirty = bSettingsDirty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGWidget_Settings.HaveSettingsBeenChanged
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGWidget_Settings::HaveSettingsBeenChanged() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGWidget_Settings", "HaveSettingsBeenChanged");

	Params::GbxUIUMGWidget_Settings_HaveSettingsBeenChanged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.PrimaryGameLayout.RegisterLayer
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              LayerTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCommonActivatableWidgetContainerBase*LayerWidget                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPrimaryGameLayout::RegisterLayer(const struct FGameplayTag& LayerTag, class UCommonActivatableWidgetContainerBase* LayerWidget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PrimaryGameLayout", "RegisterLayer");

	Params::PrimaryGameLayout_RegisterLayer Parms{};

	Parms.LayerTag = std::move(LayerTag);
	Parms.LayerWidget = LayerWidget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.UIExtensionSubsystem.K2_RegisterExtensionAsData
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              ExtensionPointTag                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIExtensionHandle               ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUIExtensionHandle UUIExtensionSubsystem::K2_RegisterExtensionAsData(const struct FGameplayTag& ExtensionPointTag, class UObject* data, int32 priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtensionSubsystem", "K2_RegisterExtensionAsData");

	Params::UIExtensionSubsystem_K2_RegisterExtensionAsData Parms{};

	Parms.ExtensionPointTag = std::move(ExtensionPointTag);
	Parms.data = data;
	Parms.priority = priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.UIExtensionSubsystem.K2_RegisterExtensionAsDataForContext
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              ExtensionPointTag                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIExtensionHandle               ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUIExtensionHandle UUIExtensionSubsystem::K2_RegisterExtensionAsDataForContext(const struct FGameplayTag& ExtensionPointTag, class UObject* ContextObject, class UObject* data, int32 priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtensionSubsystem", "K2_RegisterExtensionAsDataForContext");

	Params::UIExtensionSubsystem_K2_RegisterExtensionAsDataForContext Parms{};

	Parms.ExtensionPointTag = std::move(ExtensionPointTag);
	Parms.ContextObject = ContextObject;
	Parms.data = data;
	Parms.priority = priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.UIExtensionSubsystem.K2_RegisterExtensionAsWidget
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              ExtensionPointTag                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIExtensionHandle               ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUIExtensionHandle UUIExtensionSubsystem::K2_RegisterExtensionAsWidget(const struct FGameplayTag& ExtensionPointTag, TSubclassOf<class UUserWidget> WidgetClass, int32 priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtensionSubsystem", "K2_RegisterExtensionAsWidget");

	Params::UIExtensionSubsystem_K2_RegisterExtensionAsWidget Parms{};

	Parms.ExtensionPointTag = std::move(ExtensionPointTag);
	Parms.WidgetClass = WidgetClass;
	Parms.priority = priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.UIExtensionSubsystem.K2_RegisterExtensionAsWidgetForContext
// (Final, BlueprintCosmetic, Native, Protected, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              ExtensionPointTag                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UUserWidget>          WidgetClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          ContextObject                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   priority                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIExtensionHandle               ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUIExtensionHandle UUIExtensionSubsystem::K2_RegisterExtensionAsWidgetForContext(const struct FGameplayTag& ExtensionPointTag, TSubclassOf<class UUserWidget> WidgetClass, class UObject* ContextObject, int32 priority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtensionSubsystem", "K2_RegisterExtensionAsWidgetForContext");

	Params::UIExtensionSubsystem_K2_RegisterExtensionAsWidgetForContext Parms{};

	Parms.ExtensionPointTag = std::move(ExtensionPointTag);
	Parms.WidgetClass = WidgetClass;
	Parms.ContextObject = ContextObject;
	Parms.priority = priority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.UIExtensionSubsystem.K2_RegisterExtensionPoint
// (Final, BlueprintCosmetic, Native, Protected, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              ExtensionPointTag                                      (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EUIExtensionPointMatch                  ExtensionPointTagMatchType                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class UClass*>&            AllowedDataClasses                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(EUIExtensionAction Action, const struct FUIExtensionRequest& ExtensionRequest)>ExtensionCallback                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FUIExtensionPointHandle          ReturnValue                                            (Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FUIExtensionPointHandle UUIExtensionSubsystem::K2_RegisterExtensionPoint(const struct FGameplayTag& ExtensionPointTag, EUIExtensionPointMatch ExtensionPointTagMatchType, const TArray<class UClass*>& AllowedDataClasses, TDelegate<void(EUIExtensionAction Action, const struct FUIExtensionRequest& ExtensionRequest)> ExtensionCallback)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtensionSubsystem", "K2_RegisterExtensionPoint");

	Params::UIExtensionSubsystem_K2_RegisterExtensionPoint Parms{};

	Parms.ExtensionPointTag = std::move(ExtensionPointTag);
	Parms.ExtensionPointTagMatchType = ExtensionPointTagMatchType;
	Parms.AllowedDataClasses = std::move(AllowedDataClasses);
	Parms.ExtensionCallback = ExtensionCallback;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.UIExtensionSubsystem.UnregisterExtension
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUIExtensionHandle&        ExtensionHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtensionSubsystem::UnregisterExtension(const struct FUIExtensionHandle& ExtensionHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtensionSubsystem", "UnregisterExtension");

	Params::UIExtensionSubsystem_UnregisterExtension Parms{};

	Parms.ExtensionHandle = std::move(ExtensionHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.UIExtensionSubsystem.UnregisterExtensionPoint
// (Final, BlueprintCosmetic, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FUIExtensionPointHandle&   ExtensionPointHandle                                   (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtensionSubsystem::UnregisterExtensionPoint(const struct FUIExtensionPointHandle& ExtensionPointHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIExtensionSubsystem", "UnregisterExtensionPoint");

	Params::UIExtensionSubsystem_UnregisterExtensionPoint Parms{};

	Parms.ExtensionPointHandle = std::move(ExtensionPointHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.UIExtensionHandleFunctions.IsValid
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FUIExtensionHandle&              Handle                                                 (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIExtensionHandleFunctions::IsValid(struct FUIExtensionHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIExtensionHandleFunctions", "IsValid");

	Params::UIExtensionHandleFunctions_IsValid Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);

	return Parms.ReturnValue;
}


// Function GbxUIUMG.UIExtensionHandleFunctions.Unregister
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FUIExtensionHandle&              Handle                                                 (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtensionHandleFunctions::Unregister(struct FUIExtensionHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIExtensionHandleFunctions", "Unregister");

	Params::UIExtensionHandleFunctions_Unregister Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);
}


// Function GbxUIUMG.UIExtensionPointHandleFunctions.IsValid
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FUIExtensionPointHandle&         Handle                                                 (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UUIExtensionPointHandleFunctions::IsValid(struct FUIExtensionPointHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIExtensionPointHandleFunctions", "IsValid");

	Params::UIExtensionPointHandleFunctions_IsValid Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);

	return Parms.ReturnValue;
}


// Function GbxUIUMG.UIExtensionPointHandleFunctions.Unregister
// (Final, BlueprintCosmetic, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FUIExtensionPointHandle&         Handle                                                 (Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIExtensionPointHandleFunctions::Unregister(struct FUIExtensionPointHandle& Handle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIExtensionPointHandleFunctions", "Unregister");

	Params::UIExtensionPointHandleFunctions_Unregister Parms{};

	Parms.Handle = std::move(Handle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	Handle = std::move(Parms.Handle);
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetAutoRemoveWhenIndicatorComponentIsNull
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    CanAutomaticallyRemove                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetAutoRemoveWhenIndicatorComponentIsNull(bool CanAutomaticallyRemove)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetAutoRemoveWhenIndicatorComponentIsNull");

	Params::GbxUIUMGIndicatorDescriptor_SetAutoRemoveWhenIndicatorComponentIsNull Parms{};

	Parms.CanAutomaticallyRemove = CanAutomaticallyRemove;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetBoundingBoxAnchor
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InBoundingBoxAnchor                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetBoundingBoxAnchor(const struct FVector& InBoundingBoxAnchor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetBoundingBoxAnchor");

	Params::GbxUIUMGIndicatorDescriptor_SetBoundingBoxAnchor Parms{};

	Parms.InBoundingBoxAnchor = std::move(InBoundingBoxAnchor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetClampToScreen
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetClampToScreen(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetClampToScreen");

	Params::GbxUIUMGIndicatorDescriptor_SetClampToScreen Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetComponentSocketName
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetComponentSocketName(class FName SocketName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetComponentSocketName");

	Params::GbxUIUMGIndicatorDescriptor_SetComponentSocketName Parms{};

	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetDataObject
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          InDataObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetDataObject(class UObject* InDataObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetDataObject");

	Params::GbxUIUMGIndicatorDescriptor_SetDataObject Parms{};

	Parms.InDataObject = InDataObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetDesiredVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetDesiredVisibility(bool InVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetDesiredVisibility");

	Params::GbxUIUMGIndicatorDescriptor_SetDesiredVisibility Parms{};

	Parms.InVisible = InVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetDistanceFromOwningPlayer
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDistanceFromOwningPlayer                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetDistanceFromOwningPlayer(float InDistanceFromOwningPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetDistanceFromOwningPlayer");

	Params::GbxUIUMGIndicatorDescriptor_SetDistanceFromOwningPlayer Parms{};

	Parms.InDistanceFromOwningPlayer = InDistanceFromOwningPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetDistanceRatio
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDistanceRatio                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetDistanceRatio(float InDistanceRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetDistanceRatio");

	Params::GbxUIUMGIndicatorDescriptor_SetDistanceRatio Parms{};

	Parms.InDistanceRatio = InDistanceRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetHAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EHorizontalAlignment                    InHAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetHAlign(EHorizontalAlignment InHAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetHAlign");

	Params::GbxUIUMGIndicatorDescriptor_SetHAlign Parms{};

	Parms.InHAlignment = InHAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetIndicatorClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftClassPtr<class UClass>             InIndicatorWidgetClass                                 (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetIndicatorClass(TSoftClassPtr<class UClass> InIndicatorWidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetIndicatorClass");

	Params::GbxUIUMGIndicatorDescriptor_SetIndicatorClass Parms{};

	Parms.InIndicatorWidgetClass = InIndicatorWidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetIsInRangeVisible
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInRangeVisible                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetIsInRangeVisible(bool bInRangeVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetIsInRangeVisible");

	Params::GbxUIUMGIndicatorDescriptor_SetIsInRangeVisible Parms{};

	Parms.bInRangeVisible = bInRangeVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetLocalPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ULocalPlayer*                     InLocalPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetLocalPlayer(class ULocalPlayer* InLocalPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetLocalPlayer");

	Params::GbxUIUMGIndicatorDescriptor_SetLocalPlayer Parms{};

	Parms.InLocalPlayer = InLocalPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetMaxVisibilityRange
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMaxVisibilityRange                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetMaxVisibilityRange(float InMaxVisibilityRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetMaxVisibilityRange");

	Params::GbxUIUMGIndicatorDescriptor_SetMaxVisibilityRange Parms{};

	Parms.InMaxVisibilityRange = InMaxVisibilityRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetMinVisibilityRange
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   InMinVisibilityRange                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetMinVisibilityRange(float InMinVisibilityRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetMinVisibilityRange");

	Params::GbxUIUMGIndicatorDescriptor_SetMinVisibilityRange Parms{};

	Parms.InMinVisibilityRange = InMinVisibilityRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   InPosition                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetPosition(const struct FVector& InPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetPosition");

	Params::GbxUIUMGIndicatorDescriptor_SetPosition Parms{};

	Parms.InPosition = std::move(InPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetPriority
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InPriority                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetPriority(int32 InPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetPriority");

	Params::GbxUIUMGIndicatorDescriptor_SetPriority Parms{};

	Parms.InPriority = InPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetProjectionMode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EIndicatorCanvasProjectionMode          InProjectionMode                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetProjectionMode(EIndicatorCanvasProjectionMode InProjectionMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetProjectionMode");

	Params::GbxUIUMGIndicatorDescriptor_SetProjectionMode Parms{};

	Parms.InProjectionMode = InProjectionMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetSceneComponent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USceneComponent*                  InComponent                                            (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetSceneComponent(class USceneComponent* InComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetSceneComponent");

	Params::GbxUIUMGIndicatorDescriptor_SetSceneComponent Parms{};

	Parms.InComponent = InComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetScreenSpaceOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector2D&                 Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetScreenSpaceOffset(const struct FVector2D& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetScreenSpaceOffset");

	Params::GbxUIUMGIndicatorDescriptor_SetScreenSpaceOffset Parms{};

	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetShowClampToScreenArrow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bValue                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetShowClampToScreenArrow(bool bValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetShowClampToScreenArrow");

	Params::GbxUIUMGIndicatorDescriptor_SetShowClampToScreenArrow Parms{};

	Parms.bValue = bValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetVAlign
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EVerticalAlignment                      InVAlignment                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetVAlign(EVerticalAlignment InVAlignment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetVAlign");

	Params::GbxUIUMGIndicatorDescriptor_SetVAlign Parms{};

	Parms.InVAlignment = InVAlignment;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.SetWorldPositionOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Offset                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxUIUMGIndicatorDescriptor::SetWorldPositionOffset(const struct FVector& Offset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "SetWorldPositionOffset");

	Params::GbxUIUMGIndicatorDescriptor_SetWorldPositionOffset Parms{};

	Parms.Offset = std::move(Offset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetAutoRemoveWhenIndicatorComponentIsNull
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGIndicatorDescriptor::GetAutoRemoveWhenIndicatorComponentIsNull() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetAutoRemoveWhenIndicatorComponentIsNull");

	Params::GbxUIUMGIndicatorDescriptor_GetAutoRemoveWhenIndicatorComponentIsNull Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetBoundingBoxAnchor
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxUIUMGIndicatorDescriptor::GetBoundingBoxAnchor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetBoundingBoxAnchor");

	Params::GbxUIUMGIndicatorDescriptor_GetBoundingBoxAnchor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetClampToScreen
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGIndicatorDescriptor::GetClampToScreen() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetClampToScreen");

	Params::GbxUIUMGIndicatorDescriptor_GetClampToScreen Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetComponentSocketName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UGbxUIUMGIndicatorDescriptor::GetComponentSocketName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetComponentSocketName");

	Params::GbxUIUMGIndicatorDescriptor_GetComponentSocketName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetDataObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UObject*                    ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UObject* UGbxUIUMGIndicatorDescriptor::GetDataObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetDataObject");

	Params::GbxUIUMGIndicatorDescriptor_GetDataObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetDistanceFromOwningPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxUIUMGIndicatorDescriptor::GetDistanceFromOwningPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetDistanceFromOwningPlayer");

	Params::GbxUIUMGIndicatorDescriptor_GetDistanceFromOwningPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetDistanceRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxUIUMGIndicatorDescriptor::GetDistanceRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetDistanceRatio");

	Params::GbxUIUMGIndicatorDescriptor_GetDistanceRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetHAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EHorizontalAlignment                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EHorizontalAlignment UGbxUIUMGIndicatorDescriptor::GetHAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetHAlign");

	Params::GbxUIUMGIndicatorDescriptor_GetHAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetIndicatorClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> UGbxUIUMGIndicatorDescriptor::GetIndicatorClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetIndicatorClass");

	Params::GbxUIUMGIndicatorDescriptor_GetIndicatorClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetIsInRangeVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGIndicatorDescriptor::GetIsInRangeVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetIsInRangeVisible");

	Params::GbxUIUMGIndicatorDescriptor_GetIsInRangeVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetIsVisible
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGIndicatorDescriptor::GetIsVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetIsVisible");

	Params::GbxUIUMGIndicatorDescriptor_GetIsVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetLocalPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULocalPlayer*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULocalPlayer* UGbxUIUMGIndicatorDescriptor::GetLocalPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetLocalPlayer");

	Params::GbxUIUMGIndicatorDescriptor_GetLocalPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetMaxVisibilityRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxUIUMGIndicatorDescriptor::GetMaxVisibilityRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetMaxVisibilityRange");

	Params::GbxUIUMGIndicatorDescriptor_GetMaxVisibilityRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetMinVisibilityRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxUIUMGIndicatorDescriptor::GetMinVisibilityRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetMinVisibilityRange");

	Params::GbxUIUMGIndicatorDescriptor_GetMinVisibilityRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxUIUMGIndicatorDescriptor::GetPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetPosition");

	Params::GbxUIUMGIndicatorDescriptor_GetPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetPriority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UGbxUIUMGIndicatorDescriptor::GetPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetPriority");

	Params::GbxUIUMGIndicatorDescriptor_GetPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetProjectionMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EIndicatorCanvasProjectionMode          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EIndicatorCanvasProjectionMode UGbxUIUMGIndicatorDescriptor::GetProjectionMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetProjectionMode");

	Params::GbxUIUMGIndicatorDescriptor_GetProjectionMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetSceneComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USceneComponent*                  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USceneComponent* UGbxUIUMGIndicatorDescriptor::GetSceneComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetSceneComponent");

	Params::GbxUIUMGIndicatorDescriptor_GetSceneComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetScreenSpaceOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UGbxUIUMGIndicatorDescriptor::GetScreenSpaceOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetScreenSpaceOffset");

	Params::GbxUIUMGIndicatorDescriptor_GetScreenSpaceOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetShowClampToScreenArrow
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxUIUMGIndicatorDescriptor::GetShowClampToScreenArrow() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetShowClampToScreenArrow");

	Params::GbxUIUMGIndicatorDescriptor_GetShowClampToScreenArrow Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetVAlign
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EVerticalAlignment                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EVerticalAlignment UGbxUIUMGIndicatorDescriptor::GetVAlign() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetVAlign");

	Params::GbxUIUMGIndicatorDescriptor_GetVAlign Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxUIUMG.GbxUIUMGIndicatorDescriptor.GetWorldPositionOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UGbxUIUMGIndicatorDescriptor::GetWorldPositionOffset() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxUIUMGIndicatorDescriptor", "GetWorldPositionOffset");

	Params::GbxUIUMGIndicatorDescriptor_GetWorldPositionOffset Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

