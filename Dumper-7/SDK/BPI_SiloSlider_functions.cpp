#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPI_SiloSlider

#include "Basic.hpp"

#include "BPI_SiloSlider_classes.hpp"
#include "BPI_SiloSlider_parameters.hpp"


namespace SDK
{

// Function BPI_SiloSlider.BPI_SiloSlider_C.SetTimingProperties
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  InSliderDuration                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  InReturnDelay                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SiloSlider_C::SetTimingProperties(double InSliderDuration, double InReturnDelay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_SiloSlider_C", "SetTimingProperties");

	Params::BPI_SiloSlider_C_SetTimingProperties Parms{};

	Parms.InSliderDuration = InSliderDuration;
	Parms.InReturnDelay = InReturnDelay;

	AsUObject()->ProcessEvent(Func, &Parms);
}


// Function BPI_SiloSlider.BPI_SiloSlider_C.SetWorldEndpoints
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// const struct FVector&                   SliderStart                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// const struct FVector&                   SliderEnd                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void IBPI_SiloSlider_C::SetWorldEndpoints(const struct FVector& SliderStart, const struct FVector& SliderEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("BPI_SiloSlider_C", "SetWorldEndpoints");

	Params::BPI_SiloSlider_C_SetWorldEndpoints Parms{};

	Parms.SliderStart = std::move(SliderStart);
	Parms.SliderEnd = std::move(SliderEnd);

	AsUObject()->ProcessEvent(Func, &Parms);
}

}

