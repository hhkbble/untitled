#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxDestruction

#include "Basic.hpp"

#include "GbxDestruction_classes.hpp"
#include "GbxDestruction_parameters.hpp"


namespace SDK
{

// Function GbxDestruction.CustomFractureFieldEffects.OnApplyField
// (Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Direction                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Magnitude                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Strain                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UCustomFractureFieldEffects::OnApplyField(class UWorld* World, const struct FVector& Location, const struct FVector& Direction, float Radius, float Magnitude, float Strain)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomFractureFieldEffects", "OnApplyField");

	Params::CustomFractureFieldEffects_OnApplyField Parms{};

	Parms.World = World;
	Parms.Location = std::move(Location);
	Parms.Direction = std::move(Direction);
	Parms.Radius = Radius;
	Parms.Magnitude = Magnitude;
	Parms.Strain = Strain;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxDestruction.CustomFractureFieldEffects.OnApplyFieldWithProperties
// (Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// class UWorld*                           World                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FDestructionHitProperties& Properties                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UCustomFractureFieldEffects::OnApplyFieldWithProperties(class UWorld* World, const struct FDestructionHitProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CustomFractureFieldEffects", "OnApplyFieldWithProperties");

	Params::CustomFractureFieldEffects_OnApplyFieldWithProperties Parms{};

	Parms.World = World;
	Parms.Properties = std::move(Properties);

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxDestruction.DestructionSolverGeometryManagerComponent.OnBreakMakeFracturedChunksTransient
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FChaosBreakEvent&          BreakEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDestructionSolverGeometryManagerComponent::OnBreakMakeFracturedChunksTransient(const struct FChaosBreakEvent& BreakEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructionSolverGeometryManagerComponent", "OnBreakMakeFracturedChunksTransient");

	Params::DestructionSolverGeometryManagerComponent_OnBreakMakeFracturedChunksTransient Parms{};

	Parms.BreakEvent = std::move(BreakEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDestruction.DestructionSolverGeometryManagerComponent.OnBreakRemoveWorldQueryCollision
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FChaosBreakEvent&          BreakEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDestructionSolverGeometryManagerComponent::OnBreakRemoveWorldQueryCollision(const struct FChaosBreakEvent& BreakEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructionSolverGeometryManagerComponent", "OnBreakRemoveWorldQueryCollision");

	Params::DestructionSolverGeometryManagerComponent_OnBreakRemoveWorldQueryCollision Parms{};

	Parms.BreakEvent = std::move(BreakEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDestruction.DestructionSolverGeometryManagerComponent.OnBreakSetFracturedChunksCollisionFilterData
// (Final, Native, Public, HasOutParams)
// Parameters:
// const struct FChaosBreakEvent&          BreakEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UDestructionSolverGeometryManagerComponent::OnBreakSetFracturedChunksCollisionFilterData(const struct FChaosBreakEvent& BreakEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DestructionSolverGeometryManagerComponent", "OnBreakSetFracturedChunksCollisionFilterData");

	Params::DestructionSolverGeometryManagerComponent_OnBreakSetFracturedChunksCollisionFilterData Parms{};

	Parms.BreakEvent = std::move(BreakEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDestruction.GbxDestructibleGeometryCollectionData.GetGeometryCollectionComponentClass
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class UGbxGeometryCollectionComponent>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UGbxGeometryCollectionComponent> UGbxDestructibleGeometryCollectionData::GetGeometryCollectionComponentClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDestructibleGeometryCollectionData", "GetGeometryCollectionComponentClass");

	Params::GbxDestructibleGeometryCollectionData_GetGeometryCollectionComponentClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxDestruction.GbxDestructibleInterface.DoFracture
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   FractureOrigin                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   FractureForce                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxDestructibleInterface::DoFracture(const struct FVector& FractureOrigin, const struct FVector& FractureForce)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxDestructibleInterface", "DoFracture");

	Params::GbxDestructibleInterface_DoFracture Parms{};

	Parms.FractureOrigin = std::move(FractureOrigin);
	Parms.FractureForce = std::move(FractureForce);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDestruction.GbxDestructibleInterface.DoMaxStrainFractureSphere_Local
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   OriginOffset                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChunkFlyOffMagnitude                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxDestructibleInterface::DoMaxStrainFractureSphere_Local(const struct FVector& OriginOffset, float ChunkFlyOffMagnitude, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxDestructibleInterface", "DoMaxStrainFractureSphere_Local");

	Params::GbxDestructibleInterface_DoMaxStrainFractureSphere_Local Parms{};

	Parms.OriginOffset = std::move(OriginOffset);
	Parms.ChunkFlyOffMagnitude = ChunkFlyOffMagnitude;
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDestruction.GbxDestructibleInterface.DoMaxStrainFractureSphere_World
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector&                   Origin                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChunkFlyOffMagnitude                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxDestructibleInterface::DoMaxStrainFractureSphere_World(const struct FVector& Origin, float ChunkFlyOffMagnitude, float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxDestructibleInterface", "DoMaxStrainFractureSphere_World");

	Params::GbxDestructibleInterface_DoMaxStrainFractureSphere_World Parms{};

	Parms.Origin = std::move(Origin);
	Parms.ChunkFlyOffMagnitude = ChunkFlyOffMagnitude;
	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDestruction.GbxDestructibleInterface.DoMaxStrainFractureWhole
// (Native, Public, BlueprintCallable)

void IGbxDestructibleInterface::DoMaxStrainFractureWhole()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxDestructibleInterface", "DoMaxStrainFractureWhole");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxDestruction.GbxDestructibleInterface.SetIsFractureable
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    NewIsFractureable                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGbxDestructibleInterface::SetIsFractureable(bool NewIsFractureable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxDestructibleInterface", "SetIsFractureable");

	Params::GbxDestructibleInterface_SetIsFractureable Parms{};

	Parms.NewIsFractureable = NewIsFractureable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDestruction.GbxDestructibleInterface.GetIsFractureable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGbxDestructibleInterface::GetIsFractureable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxDestructibleInterface", "GetIsFractureable");

	Params::GbxDestructibleInterface_GetIsFractureable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxDestruction.GbxDestructibleInterface.IsFractured
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IGbxDestructibleInterface::IsFractured() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = AsUObject()->Class->GetFunction("GbxDestructibleInterface", "IsFractured");

	Params::GbxDestructibleInterface_IsFractured Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	AsUObject()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxDestruction.GbxDestructibleSkeletalMeshData.GetOnFractureParticleEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UFXSystemAsset*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UFXSystemAsset* UGbxDestructibleSkeletalMeshData::GetOnFractureParticleEffect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDestructibleSkeletalMeshData", "GetOnFractureParticleEffect");

	Params::GbxDestructibleSkeletalMeshData_GetOnFractureParticleEffect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxDestruction.GbxDestructibleSkeletalMeshData.GetPostFractureMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMesh*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMesh* UGbxDestructibleSkeletalMeshData::GetPostFractureMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDestructibleSkeletalMeshData", "GetPostFractureMesh");

	Params::GbxDestructibleSkeletalMeshData_GetPostFractureMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxDestruction.GbxDestructibleSkeletalMeshData.GetPreFractureMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMesh*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USkeletalMesh* UGbxDestructibleSkeletalMeshData::GetPreFractureMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDestructibleSkeletalMeshData", "GetPreFractureMesh");

	Params::GbxDestructibleSkeletalMeshData_GetPreFractureMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxDestruction.GbxDestructibleStaticMeshData.GetPostFractureMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UGbxDestructibleStaticMeshData::GetPostFractureMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDestructibleStaticMeshData", "GetPostFractureMesh");

	Params::GbxDestructibleStaticMeshData_GetPostFractureMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxDestruction.GbxDestructibleStaticMeshData.GetPreFractureMesh
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UStaticMesh*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UStaticMesh* UGbxDestructibleStaticMeshData::GetPreFractureMesh() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxDestructibleStaticMeshData", "GetPreFractureMesh");

	Params::GbxDestructibleStaticMeshData_GetPreFractureMesh Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxDestruction.GbxDestructionStatics.DoFracture
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FDestructionHitProperties& Properties                                             (ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxDestructionStatics::DoFracture(const struct FDestructionHitProperties& Properties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxDestructionStatics", "DoFracture");

	Params::GbxDestructionStatics_DoFracture Parms{};

	Parms.Properties = std::move(Properties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDestruction.GbxGeometryCollectionComponent.GetDestructibleData
// (Native, Public, BlueprintCallable)
// Parameters:
// const class UGbxDestructibleGeometryCollectionData*ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UGbxDestructibleGeometryCollectionData* UGbxGeometryCollectionComponent::GetDestructibleData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGeometryCollectionComponent", "GetDestructibleData");

	Params::GbxGeometryCollectionComponent_GetDestructibleData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxDestruction.GbxGeometryCollectionComponent.OnBreakRunDestructionCallbacks
// (Final, Native, Private, HasOutParams)
// Parameters:
// const struct FChaosBreakEvent&          BreakEvent                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UGbxGeometryCollectionComponent::OnBreakRunDestructionCallbacks(const struct FChaosBreakEvent& BreakEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGeometryCollectionComponent", "OnBreakRunDestructionCallbacks");

	Params::GbxGeometryCollectionComponent_OnBreakRunDestructionCallbacks Parms{};

	Parms.BreakEvent = std::move(BreakEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDestruction.GbxGeometryCollectionComponent.SetDestructibleData
// (Native, Public, BlueprintCallable)
// Parameters:
// const class UGbxDestructibleData*       data                                                   (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxGeometryCollectionComponent::SetDestructibleData(const class UGbxDestructibleData* data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGeometryCollectionComponent", "SetDestructibleData");

	Params::GbxGeometryCollectionComponent_SetDestructibleData Parms{};

	Parms.data = data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDestruction.GbxGeometryCollectionComponent.GetPercentageOfChunksFractured
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxGeometryCollectionComponent::GetPercentageOfChunksFractured() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxGeometryCollectionComponent", "GetPercentageOfChunksFractured");

	Params::GbxGeometryCollectionComponent_GetPercentageOfChunksFractured Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

