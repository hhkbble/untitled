#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxNav

#include "Basic.hpp"

#include "GbxNav_classes.hpp"
#include "GbxNav_parameters.hpp"


namespace SDK
{

// Function GbxNav.GbxFlightNav.BuildFlightNav
// (Final, Native, Public, BlueprintCallable)

void AGbxFlightNav::BuildFlightNav()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxFlightNav", "BuildFlightNav");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavAnimData.Build
// (Final, Native, Public, BlueprintCallable)

void UGbxNavAnimData::Build()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavAnimData", "Build");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavAnimData.Populate
// (Final, Native, Public, BlueprintCallable)

void UGbxNavAnimData::Populate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavAnimData", "Populate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavAnimData.GetMoveAnims
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// TArray<class UAnimSequence*>*           OutOptions                                             (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UGbxNavAnimData::GetMoveAnims(TArray<class UAnimSequence*>* OutOptions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavAnimData", "GetMoveAnims");

	Params::GbxNavAnimData_GetMoveAnims Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutOptions != nullptr)
		*OutOptions = std::move(Parms.OutOptions);
}


// Function GbxNav.GbxNavAnimInstance.OnStanceChange
// (Event, Protected, BlueprintEvent)

void UGbxNavAnimInstance::OnStanceChange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavAnimInstance", "OnStanceChange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function GbxNav.GbxNavBlueprintLibrary.BreakGbxNavQueryData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxNavQueryData&          QueryData                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// class UGbxNavMeshLayer**                layer                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxNavAreaUserData**             Areas                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxNavEdgeUserData**             Edges                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxNavBlueprintLibrary::BreakGbxNavQueryData(const struct FGbxNavQueryData& QueryData, class UGbxNavMeshLayer** layer, class UGbxNavAreaUserData** Areas, class UGbxNavEdgeUserData** Edges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxNavBlueprintLibrary", "BreakGbxNavQueryData");

	Params::GbxNavBlueprintLibrary_BreakGbxNavQueryData Parms{};

	Parms.QueryData = std::move(QueryData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (layer != nullptr)
		*layer = Parms.layer;

	if (Areas != nullptr)
		*Areas = Parms.Areas;

	if (Edges != nullptr)
		*Edges = Parms.Edges;
}


// Function GbxNav.GbxNavBlueprintLibrary.ClearNavModifierOverride
// (Final, Native, Static, Public, BlueprintCallable)

void UGbxNavBlueprintLibrary::ClearNavModifierOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxNavBlueprintLibrary", "ClearNavModifierOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavBlueprintLibrary.FindPathOnNavMesh
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Goal                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AgentRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxNavQueryData&          QueryData                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxNavBlueprintLibrary::FindPathOnNavMesh(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& Goal, float AgentRadius, const struct FGbxNavQueryData& QueryData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxNavBlueprintLibrary", "FindPathOnNavMesh");

	Params::GbxNavBlueprintLibrary_FindPathOnNavMesh Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.Goal = std::move(Goal);
	Parms.AgentRadius = AgentRadius;
	Parms.QueryData = std::move(QueryData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavBlueprintLibrary.GetGbxNavAnimPath
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UGbxNavBlueprintLibrary::GetGbxNavAnimPath(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxNavBlueprintLibrary", "GetGbxNavAnimPath");

	Params::GbxNavBlueprintLibrary_GetGbxNavAnimPath Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavBlueprintLibrary.LockNavigation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Block                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxNavBlueprintLibrary::LockNavigation(class AActor* Actor, class FName reason, bool Block)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxNavBlueprintLibrary", "LockNavigation");

	Params::GbxNavBlueprintLibrary_LockNavigation Parms{};

	Parms.Actor = Actor;
	Parms.reason = reason;
	Parms.Block = Block;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavBlueprintLibrary.LockStance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Block                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGameDataHandleProperty_                stance                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxNavBlueprintLibrary::LockStance(class AActor* Actor, class FName reason, bool Block, FGameDataHandleProperty_ stance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxNavBlueprintLibrary", "LockStance");

	Params::GbxNavBlueprintLibrary_LockStance Parms{};

	Parms.Actor = Actor;
	Parms.reason = reason;
	Parms.Block = Block;
	Parms.stance = stance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavBlueprintLibrary.MakeGbxNavQueryData
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UGbxNavMeshLayer*                 layer                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxNavAreaUserData*              Areas                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxNavEdgeUserData*              Edges                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxNavQueryData                 ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FGbxNavQueryData UGbxNavBlueprintLibrary::MakeGbxNavQueryData(class UGbxNavMeshLayer* layer, class UGbxNavAreaUserData* Areas, class UGbxNavEdgeUserData* Edges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxNavBlueprintLibrary", "MakeGbxNavQueryData");

	Params::GbxNavBlueprintLibrary_MakeGbxNavQueryData Parms{};

	Parms.layer = layer;
	Parms.Areas = Areas;
	Parms.Edges = Edges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavBlueprintLibrary.ProjectToNavMesh
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Distance                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxNavQueryData&          QueryData                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector*                         Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxNavBlueprintLibrary::ProjectToNavMesh(class UObject* WorldContextObject, const struct FVector& Start, float Distance, const struct FGbxNavQueryData& QueryData, struct FVector* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxNavBlueprintLibrary", "ProjectToNavMesh");

	Params::GbxNavBlueprintLibrary_ProjectToNavMesh Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.Distance = Distance;
	Parms.QueryData = std::move(QueryData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = std::move(Parms.Result);

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavBlueprintLibrary.SetNavModifierOverride
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGbxNavGoalModifiers&      Modifiers                                              (Parm, NativeAccessSpecifierPublic)

void UGbxNavBlueprintLibrary::SetNavModifierOverride(const struct FGbxNavGoalModifiers& Modifiers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxNavBlueprintLibrary", "SetNavModifierOverride");

	Params::GbxNavBlueprintLibrary_SetNavModifierOverride Parms{};

	Parms.Modifiers = std::move(Modifiers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavBlueprintLibrary.TraceNavMesh
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Goal                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AgentRadius                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxNavQueryData&          QueryData                                              (Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxNavBlueprintLibrary::TraceNavMesh(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& Goal, float AgentRadius, const struct FGbxNavQueryData& QueryData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxNavBlueprintLibrary", "TraceNavMesh");

	Params::GbxNavBlueprintLibrary_TraceNavMesh Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Start = std::move(Start);
	Parms.Goal = std::move(Goal);
	Parms.AgentRadius = AgentRadius;
	Parms.QueryData = std::move(QueryData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavCharacter.OnRep_Stance
// (Final, Native, Public)

void AGbxNavCharacter::OnRep_Stance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavCharacter", "OnRep_Stance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavCharacter.ReceivedStanceChanged
// (Event, Public, BlueprintEvent)
// Parameters:
// FGameDataHandleProperty_                OldStance                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGameDataHandleProperty_                NewStance                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxNavCharacter::ReceivedStanceChanged(FGameDataHandleProperty_ OldStance, FGameDataHandleProperty_ NewStance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavCharacter", "ReceivedStanceChanged");

	Params::GbxNavCharacter_ReceivedStanceChanged Parms{};

	Parms.OldStance = OldStance;
	Parms.NewStance = NewStance;

	UObject::ProcessEvent(Func, &Parms);
}


// Function GbxNav.GbxNavCharacterMovementComponent.OnRep_NavType
// (Final, Native, Private)

void UGbxNavCharacterMovementComponent::OnRep_NavType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavCharacterMovementComponent", "OnRep_NavType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavLinkActor.SetLinkEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxNavLinkActor::SetLinkEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavLinkActor", "SetLinkEnabled");

	Params::GbxNavLinkActor_SetLinkEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavLinkActor.IsLinkEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGbxNavLinkActor::IsLinkEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavLinkActor", "IsLinkEnabled");

	Params::GbxNavLinkActor_IsLinkEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavLinkComponent.SetLinkEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxNavLinkComponent::SetLinkEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavLinkComponent", "SetLinkEnabled");

	Params::GbxNavLinkComponent_SetLinkEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavLinkComponent.IsLinkEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxNavLinkComponent::IsLinkEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavLinkComponent", "IsLinkEnabled");

	Params::GbxNavLinkComponent_IsLinkEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavMesh.BuildNavMesh
// (Final, Native, Public, BlueprintCallable)

void AGbxNavMesh::BuildNavMesh()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavMesh", "BuildNavMesh");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavObstacleComponent.SetObstacleEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxNavObstacleComponent::SetObstacleEnabled(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavObstacleComponent", "SetObstacleEnabled");

	Params::GbxNavObstacleComponent_SetObstacleEnabled Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavObstacleComponent.SetObstacleHalfHeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   HalfHeight                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxNavObstacleComponent::SetObstacleHalfHeight(float HalfHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavObstacleComponent", "SetObstacleHalfHeight");

	Params::GbxNavObstacleComponent_SetObstacleHalfHeight Parms{};

	Parms.HalfHeight = HalfHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavObstacleComponent.SetObstacleRadius
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxNavObstacleComponent::SetObstacleRadius(float Radius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavObstacleComponent", "SetObstacleRadius");

	Params::GbxNavObstacleComponent_SetObstacleRadius Parms{};

	Parms.Radius = Radius;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavObstacleComponent.GetObstacleHalfHeight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxNavObstacleComponent::GetObstacleHalfHeight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavObstacleComponent", "GetObstacleHalfHeight");

	Params::GbxNavObstacleComponent_GetObstacleHalfHeight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavObstacleComponent.GetObstacleRadius
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UGbxNavObstacleComponent::GetObstacleRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavObstacleComponent", "GetObstacleRadius");

	Params::GbxNavObstacleComponent_GetObstacleRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavObstacleComponent.IsObstacleEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxNavObstacleComponent::IsObstacleEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavObstacleComponent", "IsObstacleEnabled");

	Params::GbxNavObstacleComponent_IsObstacleEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavPainter.SetPainterEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGbxNavPainter::SetPainterEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavPainter", "SetPainterEnabled");

	Params::GbxNavPainter_SetPainterEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavPainter.GetPainterComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UGbxNavPainterComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UGbxNavPainterComponent* AGbxNavPainter::GetPainterComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavPainter", "GetPainterComponent");

	Params::GbxNavPainter_GetPainterComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavPainter.IsPainterEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGbxNavPainter::IsPainterEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavPainter", "IsPainterEnabled");

	Params::GbxNavPainter_IsPainterEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavPainterComponent.SetPainterEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewEnabled                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxNavPainterComponent::SetPainterEnabled(bool bNewEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavPainterComponent", "SetPainterEnabled");

	Params::GbxNavPainterComponent_SetPainterEnabled Parms{};

	Parms.bNewEnabled = bNewEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavPainterComponent.IsPainterEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxNavPainterComponent::IsPainterEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavPainterComponent", "IsPainterEnabled");

	Params::GbxNavPainterComponent_IsPainterEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxNavPathTestActor.RebuildPath
// (Final, Native, Public, BlueprintCallable)

void AGbxNavPathTestActor::RebuildPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavPathTestActor", "RebuildPath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavPathTestActor.RefreshAgent
// (Final, Native, Public, BlueprintCallable)

void AGbxNavPathTestActor::RefreshAgent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavPathTestActor", "RefreshAgent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavWorldSettings.RemoveAllNavigation
// (Final, Native, Public, BlueprintCallable)

void AGbxNavWorldSettings::RemoveAllNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavWorldSettings", "RemoveAllNavigation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxNavWorldSettings.RemoveAutoNavigation
// (Final, Native, Public, BlueprintCallable)

void AGbxNavWorldSettings::RemoveAutoNavigation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxNavWorldSettings", "RemoveAutoNavigation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxStanceBlueprintLibrary.CurrentStanceHasTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxStanceBlueprintLibrary::CurrentStanceHasTag(const struct FGameplayTag& Tag, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxStanceBlueprintLibrary", "CurrentStanceHasTag");

	Params::GbxStanceBlueprintLibrary_CurrentStanceHasTag Parms{};

	Parms.Tag = std::move(Tag);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxStanceBlueprintLibrary.CurrentStanceQueryTags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTagQuery&         Query                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxStanceBlueprintLibrary::CurrentStanceQueryTags(const struct FGameplayTagQuery& Query, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxStanceBlueprintLibrary", "CurrentStanceQueryTags");

	Params::GbxStanceBlueprintLibrary_CurrentStanceQueryTags Parms{};

	Parms.Query = std::move(Query);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxStanceBlueprintLibrary.GetCurrentStance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGameDataHandleProperty_                ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

FGameDataHandleProperty_ UGbxStanceBlueprintLibrary::GetCurrentStance(class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxStanceBlueprintLibrary", "GetCurrentStance");

	Params::GbxStanceBlueprintLibrary_GetCurrentStance Parms{};

	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxStanceBlueprintLibrary.GetStanceForTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const struct FGameplayTag&              Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGameDataHandleProperty_                ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

FGameDataHandleProperty_ UGbxStanceBlueprintLibrary::GetStanceForTag(const struct FGameplayTag& Tag, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxStanceBlueprintLibrary", "GetStanceForTag");

	Params::GbxStanceBlueprintLibrary_GetStanceForTag Parms{};

	Parms.Tag = std::move(Tag);
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxStanceBlueprintLibrary.LockStance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxStanceBlueprintLibrary::LockStance(class FName reason, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxStanceBlueprintLibrary", "LockStance");

	Params::GbxStanceBlueprintLibrary_LockStance Parms{};

	Parms.reason = reason;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxNav.GbxStanceBlueprintLibrary.StanceHasTag
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const FGameDataHandleProperty_&         StanceDef                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              Tag                                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxStanceBlueprintLibrary::StanceHasTag(const FGameDataHandleProperty_& StanceDef, const struct FGameplayTag& Tag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxStanceBlueprintLibrary", "StanceHasTag");

	Params::GbxStanceBlueprintLibrary_StanceHasTag Parms{};

	Parms.StanceDef = StanceDef;
	Parms.Tag = std::move(Tag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxStanceBlueprintLibrary.StanceQueryTags
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// const FGameDataHandleProperty_&         StanceDef                                              (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTagQuery&         Query                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxStanceBlueprintLibrary::StanceQueryTags(const FGameDataHandleProperty_& StanceDef, const struct FGameplayTagQuery& Query)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxStanceBlueprintLibrary", "StanceQueryTags");

	Params::GbxStanceBlueprintLibrary_StanceQueryTags Parms{};

	Parms.StanceDef = StanceDef;
	Parms.Query = std::move(Query);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxNav.GbxStanceBlueprintLibrary.UnlockStance
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FName                             reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          OwnerContext                                           (Parm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxStanceBlueprintLibrary::UnlockStance(class FName reason, class UObject* OwnerContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxStanceBlueprintLibrary", "UnlockStance");

	Params::GbxStanceBlueprintLibrary_UnlockStance Parms{};

	Parms.reason = reason;
	Parms.OwnerContext = OwnerContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

