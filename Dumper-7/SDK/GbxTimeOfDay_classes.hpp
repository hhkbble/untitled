#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxTimeOfDay

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "GbxEngine_classes.hpp"
#include "Engine_classes.hpp"
#include "GbxTimeOfDay_structs.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class GbxTimeOfDay.TimeOfDayPrivateListener
// 0x0000 (0x0000 - 0x0000)
class ITimeOfDayPrivateListener final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TimeOfDayPrivateListener")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TimeOfDayPrivateListener")
	}
	static class ITimeOfDayPrivateListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITimeOfDayPrivateListener>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ITimeOfDayPrivateListener;

// Class GbxTimeOfDay.TimeOfDayZone
// 0x0000 (0x0000 - 0x0000)
class ITimeOfDayZone final
{
public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TimeOfDayZone")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TimeOfDayZone")
	}
	static class ITimeOfDayZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITimeOfDayZone>();
	}

	class UObject* AsUObject()
	{
		return reinterpret_cast<UObject*>(this);
	}
	const class UObject* AsUObject() const
	{
		return reinterpret_cast<const UObject*>(this);
	}
};
DUMPER7_ASSERTS_ITimeOfDayZone;

// Class GbxTimeOfDay.NexusConfigStoreTimeOfDayCycle
// 0x0018 (0x0398 - 0x0380)
class UNexusConfigStoreTimeOfDayCycle final : public UNexusConfigStoreBasicDefFlat
{
public:
	uint8                                         Pad_380[0x18];                                     // 0x0380(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("NexusConfigStoreTimeOfDayCycle")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"NexusConfigStoreTimeOfDayCycle")
	}
	static class UNexusConfigStoreTimeOfDayCycle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNexusConfigStoreTimeOfDayCycle>();
	}
};
DUMPER7_ASSERTS_UNexusConfigStoreTimeOfDayCycle;

// Class GbxTimeOfDay.TimeOfDayBlueprintLibrary
// 0x0000 (0x0028 - 0x0028)
class UTimeOfDayBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddTimeOfDayEventListener(class UObject* WorldContextObject, class UObject* InListener);
	static float GetTimeOfDay(class UObject* WorldContextObject);
	static ETimeOfDayState GetTimeOfDayState(class UObject* WorldContextObject);
	static void PauseTimeOfDay(class UObject* WorldContextObject);
	static void RemoveTimeOfDayEventListener(class UObject* WorldContextObject, class UObject* InListener);
	static void SetTimeOfDay(class UObject* WorldContextObject, float NewTimeOfDay);
	static void StartTimeOfDay(class UObject* WorldContextObject);
	static void TransitionDownOneLayer(class UObject* WorldContextObject, float TransitionDuration);
	static void TransitionToLayer(class UObject* WorldContextObject, const class FString& ToLayer, float TransitionDuration, bool bForceLayerChange);
	static void TransitionUpOneLayer(class UObject* WorldContextObject, float TransitionDuration);

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TimeOfDayBlueprintLibrary")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TimeOfDayBlueprintLibrary")
	}
	static class UTimeOfDayBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeOfDayBlueprintLibrary>();
	}
};
DUMPER7_ASSERTS_UTimeOfDayBlueprintLibrary;

// Class GbxTimeOfDay.TimeOfDayControlledPointLight
// 0x0248 (0x05F0 - 0x03A8)
class ATimeOfDayControlledPointLight final : public APointLight
{
public:
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeOfDayControlledLightSettings      TimeOfDayControlledLightSettings;                  // 0x03B0(0x0010)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C0[0x228];                                    // 0x03C0(0x0228)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bControlledbyTimeOfDay;                            // 0x05E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TimeOfDayControlledPointLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TimeOfDayControlledPointLight")
	}
	static class ATimeOfDayControlledPointLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATimeOfDayControlledPointLight>();
	}
};
DUMPER7_ASSERTS_ATimeOfDayControlledPointLight;

// Class GbxTimeOfDay.TimeOfDayControlledSpotLight
// 0x0248 (0x05F0 - 0x03A8)
class ATimeOfDayControlledSpotLight final : public ASpotLight
{
public:
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeOfDayControlledLightSettings      TimeOfDayControlledLightSettings;                  // 0x03B0(0x0010)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C0[0x228];                                    // 0x03C0(0x0228)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bControlledbyTimeOfDay;                            // 0x05E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TimeOfDayControlledSpotLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TimeOfDayControlledSpotLight")
	}
	static class ATimeOfDayControlledSpotLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATimeOfDayControlledSpotLight>();
	}
};
DUMPER7_ASSERTS_ATimeOfDayControlledSpotLight;

// Class GbxTimeOfDay.TimeOfDayControlledRectLight
// 0x0248 (0x05F0 - 0x03A8)
class ATimeOfDayControlledRectLight final : public ARectLight
{
public:
	uint8                                         Pad_3A8[0x8];                                      // 0x03A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimeOfDayControlledLightSettings      TimeOfDayControlledLightSettings;                  // 0x03B0(0x0010)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C0[0x228];                                    // 0x03C0(0x0228)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bControlledbyTimeOfDay;                            // 0x05E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TimeOfDayControlledRectLight")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TimeOfDayControlledRectLight")
	}
	static class ATimeOfDayControlledRectLight* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATimeOfDayControlledRectLight>();
	}
};
DUMPER7_ASSERTS_ATimeOfDayControlledRectLight;

// Class GbxTimeOfDay.TimeOfDayProjectSettings
// 0x0050 (0x0088 - 0x0038)
class UTimeOfDayProjectSettings final : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UMaterialParameterCollection> PathToMPC;                                    // 0x0038(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	FGbxDefPtrProperty_                           TimeWwiseParam;                                    // 0x0060(0x0018)(Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FTimeOfDayWeatherState>         WeatherStates;                                     // 0x0078(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TimeOfDayProjectSettings")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TimeOfDayProjectSettings")
	}
	static class UTimeOfDayProjectSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTimeOfDayProjectSettings>();
	}
};
DUMPER7_ASSERTS_UTimeOfDayProjectSettings;

// Class GbxTimeOfDay.TimeOfDayVolume
// 0x0060 (0x0428 - 0x03C8)
class ATimeOfDayVolume final : public AVolume
{
public:
	uint8                                         Pad_3C8[0x20];                                     // 0x03C8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TransitionTime;                                    // 0x03E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FGameDataHandleProperty_                      TimeOfDayCycleDef;                                 // 0x03F0(0x0018)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartLayer;                                        // 0x0408(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         priority;                                          // 0x0410(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesExclusiveForecasts;                           // 0x0414(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_415[0x13];                                     // 0x0415(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void TransitionBaseLayer(class FName BaseLayer, float LayerTransitionTime);
	void TransitionWeatherLayer(const struct FTimeOfDayWeatherForecast& ForecastData);

	void EnumerateBaseLayerNames(TArray<class FName>* OutLayerNames) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("TimeOfDayVolume")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"TimeOfDayVolume")
	}
	static class ATimeOfDayVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATimeOfDayVolume>();
	}
};
DUMPER7_ASSERTS_ATimeOfDayVolume;

// Class GbxTimeOfDay.WorldTimeOfDayActor
// 0x0198 (0x0528 - 0x0390)
class AWorldTimeOfDayActor final : public AActor
{
public:
	uint8                                         Pad_390[0x30];                                     // 0x0390(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UDirectionalLightComponent*             SunDirectionalLightComponent;                      // 0x03C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             MoonDirectionalLightComponent;                     // 0x03C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLightComponent;                                 // 0x03D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyAtmosphereComponent*                SkyAtmosphereComponent;                            // 0x03D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVolumetricCloudComponent*              VolumetricCloudComponent;                          // 0x03E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         ExponentialHeightFogComponent;                     // 0x03E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostProcessComponent;                              // 0x03F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGbxNiagaraCloudscapeComponent*         NiagaraCloudscapeComponent;                        // 0x03F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x0400(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartLayer;                                        // 0x0404(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40C[0x4];                                      // 0x040C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FGameDataHandleProperty_                      TimeOfDayCycleDef;                                 // 0x0410(0x0018)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOfDay;                                         // 0x0428(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideCycleLength;                              // 0x042C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42D[0x3];                                      // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideCycleLength;                               // 0x0430(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunlightZenithOffset;                              // 0x0434(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SunlightRotation;                                  // 0x0438(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonlightZenithOffset;                             // 0x043C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonlightRotation;                                 // 0x0440(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonlightPitch;                                    // 0x0444(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonlightYaw;                                      // 0x0448(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoonlightRoll;                                     // 0x044C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMoonlightZenithRotation;                       // 0x0450(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVolumetricCloudComponentVisible;                // 0x0451(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCinematicTimeOfDay;                            // 0x0452(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_453[0x1];                                      // 0x0453(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CinematicTimeOfDay;                                // 0x0454(0x0004)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCinematicTimeOfDayBaseLayer;                   // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_459[0x7];                                      // 0x0459(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CinematicTimeOfDayBaseLayer;                       // 0x0460(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCinematicTimeOfDayWeatherLayer;                // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, EditConst, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CinematicTimeOfDayWeatherLayer;                    // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, Interp, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0488(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWeather;                                    // 0x048C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsesExclusiveForecasts;                           // 0x048D(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48E[0x2];                                      // 0x048E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTimeOfDayStateSettings>        StateSettings;                                     // 0x0490(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      TimeOfDayBookmarks;                                // 0x04A0(0x0050)(Edit, NativeAccessSpecifierPublic)
	int32                                         CycleCount;                                        // 0x04F0(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bTimeOfDayPaused;                                  // 0x04F4(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F5[0x3];                                      // 0x04F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWorldTimeOfDayWeatherData>     WorldWeatherData;                                  // 0x04F8(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	TArray<struct FWorldTimeOfDayBaseLayerOverride> WorldBaseLayerOverrides;                         // 0x0508(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPrivate)
	uint8                                         Pad_518[0x10];                                     // 0x0518(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_CycleCount(int32 PreviousCycleCount);
	void OnRep_TimeOfDay();
	void OnRep_WorldTimeOfDayBaseLayerOverrides();
	void OnRep_WorldTimeOfDayWeatherData();
	void SetCinematicTimeOfDay(float InCinematicTimeOfDay);
	void SetCinematicTimeOfDayBaseLayer(const class FString& InCinematicTimeOfDayBaseLayer);
	void SetCinematicTimeOfDayWeatherLayer(const class FString& InCinematicTimeOfDayWeatherLayer);
	void SetUseCinematicTimeOfDay(bool InUseCinematicTimeOfDay);
	void SetUseCinematicTimeOfDayBaseLayer(bool InUseCinematicTimeOfDayBaseLayer);
	void SetUseCinematicTimeOfDayWeatherLayer(bool InUseCinematicTimeOfDayWeatherLayer);
	void TransitionBaseLayer(class FName BaseLayer, float LayerTransitionTime);
	void TransitionWeatherLayer(const struct FTimeOfDayWeatherForecast& ForecastData);

	void EnumerateBaseLayerNames(TArray<class FName>* OutLayerNames) const;

public:
	static class UClass* StaticClass()
	{
		STATIC_CLASS_IMPL("WorldTimeOfDayActor")
	}
	static const class FName& StaticName()
	{
		STATIC_NAME_IMPL(L"WorldTimeOfDayActor")
	}
	static class AWorldTimeOfDayActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWorldTimeOfDayActor>();
	}
};
DUMPER7_ASSERTS_AWorldTimeOfDayActor;

}

