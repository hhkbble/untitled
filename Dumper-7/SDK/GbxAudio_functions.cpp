#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxAudio

#include "Basic.hpp"

#include "GbxAudio_classes.hpp"
#include "GbxAudio_parameters.hpp"


namespace SDK
{

// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.ApplyActionOnEvent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGbxAudioPlaybackInstance& PlaybackInstance                                       (Parm, NativeAccessSpecifierPublic)
// EWwisePlaybackAction                    Action                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::ApplyActionOnEvent(const struct FGbxAudioPlaybackInstance& PlaybackInstance, EWwisePlaybackAction Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "ApplyActionOnEvent");

	Params::GbxAudioBlueprintFunctionLibrary_ApplyActionOnEvent Parms{};

	Parms.PlaybackInstance = std::move(PlaybackInstance);
	Parms.Action = Action;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.GetClosestListener
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   SourceLocation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool*                                   bSuccess                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  Distance                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         ListenerLocation                                       (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector*                         ListenerDirection                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::GetClosestListener(class UObject* WorldContextObject, const struct FVector& SourceLocation, bool* bSuccess, float* Distance, struct FVector* ListenerLocation, struct FVector* ListenerDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "GetClosestListener");

	Params::GbxAudioBlueprintFunctionLibrary_GetClosestListener Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.SourceLocation = std::move(SourceLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (bSuccess != nullptr)
		*bSuccess = Parms.bSuccess;

	if (Distance != nullptr)
		*Distance = Parms.Distance;

	if (ListenerLocation != nullptr)
		*ListenerLocation = std::move(Parms.ListenerLocation);

	if (ListenerDirection != nullptr)
		*ListenerDirection = std::move(Parms.ListenerDirection);
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.GetGameParameterValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EmitterTag                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     GameParameterDef                                       (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float*                                  out_Value                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAudioBlueprintFunctionLibrary::GetGameParameterValue(class AActor* Actor, class FName EmitterTag, FGbxDefPtrProperty_ GameParameterDef, float* out_Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "GetGameParameterValue");

	Params::GbxAudioBlueprintFunctionLibrary_GetGameParameterValue Parms{};

	Parms.Actor = Actor;
	Parms.EmitterTag = EmitterTag;
	Parms.GameParameterDef = GameParameterDef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (out_Value != nullptr)
		*out_Value = Parms.out_Value;

	return Parms.ReturnValue;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.IsManagedLoopPlaying
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FManagedLoopHandle&        ManagedLoopHandle                                      (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAudioBlueprintFunctionLibrary::IsManagedLoopPlaying(const struct FManagedLoopHandle& ManagedLoopHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "IsManagedLoopPlaying");

	Params::GbxAudioBlueprintFunctionLibrary_IsManagedLoopPlaying Parms{};

	Parms.ManagedLoopHandle = std::move(ManagedLoopHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.IsPlaying
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FGbxAudioPlaybackInstance& PlaybackInstance                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAudioBlueprintFunctionLibrary::IsPlaying(const struct FGbxAudioPlaybackInstance& PlaybackInstance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "IsPlaying");

	Params::GbxAudioBlueprintFunctionLibrary_IsPlaying Parms{};

	Parms.PlaybackInstance = std::move(PlaybackInstance);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.IsPossiblyAudible
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxAudioEvent&            Event                                                  (Parm, NativeAccessSpecifierPublic)
// class AActor*                           ContextActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UGbxAudioBlueprintFunctionLibrary::IsPossiblyAudible(class UObject* WorldContextObject, const struct FVector& Location, const struct FGbxAudioEvent& Event, class AActor* ContextActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "IsPossiblyAudible");

	Params::GbxAudioBlueprintFunctionLibrary_IsPossiblyAudible Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Location = std::move(Location);
	Parms.Event = std::move(Event);
	Parms.ContextActor = ContextActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.OverrideEmitterSources
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const TArray<struct FGbxAudioEmitterSource>&Sources                                                (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EmitterTag                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::OverrideEmitterSources(const TArray<struct FGbxAudioEmitterSource>& Sources, class AActor* Actor, class FName EmitterTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "OverrideEmitterSources");

	Params::GbxAudioBlueprintFunctionLibrary_OverrideEmitterSources Parms{};

	Parms.Sources = std::move(Sources);
	Parms.Actor = Actor;
	Parms.EmitterTag = EmitterTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.PlayAudioGraph
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ContextActor                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UGbxAudioGraphAsset*              AudioGraph                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::PlayAudioGraph(class UObject* WorldContextObject, class AActor* ContextActor, class UGbxAudioGraphAsset* AudioGraph)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "PlayAudioGraph");

	Params::GbxAudioBlueprintFunctionLibrary_PlayAudioGraph Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ContextActor = ContextActor;
	Parms.AudioGraph = AudioGraph;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.PostEventInWorld
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ActorInstigator                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxAudioEmitterSource&    EmitterSource                                          (Parm, NoDestructor, NativeAccessSpecifierPublic)
// const struct FGbxAudioEvent&            Event                                                  (Parm, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     OptionalSwitch                                         (Parm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAudioPlaybackInstance        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAudioPlaybackInstance UGbxAudioBlueprintFunctionLibrary::PostEventInWorld(class UObject* WorldContextObject, class AActor* ActorInstigator, const struct FGbxAudioEmitterSource& EmitterSource, const struct FGbxAudioEvent& Event, FGbxDefPtrProperty_ OptionalSwitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "PostEventInWorld");

	Params::GbxAudioBlueprintFunctionLibrary_PostEventInWorld Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.ActorInstigator = ActorInstigator;
	Parms.EmitterSource = std::move(EmitterSource);
	Parms.Event = std::move(Event);
	Parms.OptionalSwitch = OptionalSwitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.PostTrigger
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGbxAudioPlaybackInstance& PlaybackInstance                                       (Parm, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     Trigger                                                (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::PostTrigger(const struct FGbxAudioPlaybackInstance& PlaybackInstance, FGbxDefPtrProperty_ Trigger)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "PostTrigger");

	Params::GbxAudioBlueprintFunctionLibrary_PostTrigger Parms{};

	Parms.PlaybackInstance = std::move(PlaybackInstance);
	Parms.Trigger = Trigger;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.PostWwiseEventOnActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EmitterTag                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxAudioEvent&            Event                                                  (Parm, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     OptionalSwitch                                         (Parm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAudioPlaybackInstance        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAudioPlaybackInstance UGbxAudioBlueprintFunctionLibrary::PostWwiseEventOnActor(class AActor* Actor, class FName EmitterTag, const struct FGbxAudioEvent& Event, FGbxDefPtrProperty_ OptionalSwitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "PostWwiseEventOnActor");

	Params::GbxAudioBlueprintFunctionLibrary_PostWwiseEventOnActor Parms{};

	Parms.Actor = Actor;
	Parms.EmitterTag = EmitterTag;
	Parms.Event = std::move(Event);
	Parms.OptionalSwitch = OptionalSwitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.PostWwiseEventOnActorSocket
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             socket                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxAudioEvent&            Event                                                  (Parm, NativeAccessSpecifierPublic)
// bool                                    bAttached                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxAudioEmitterSource&    SocketTransform                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     OptionalSwitch                                         (Parm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGbxAudioPlaybackInstance        ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FGbxAudioPlaybackInstance UGbxAudioBlueprintFunctionLibrary::PostWwiseEventOnActorSocket(class AActor* Actor, class FName socket, const struct FGbxAudioEvent& Event, bool bAttached, const struct FGbxAudioEmitterSource& SocketTransform, FGbxDefPtrProperty_ OptionalSwitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "PostWwiseEventOnActorSocket");

	Params::GbxAudioBlueprintFunctionLibrary_PostWwiseEventOnActorSocket Parms{};

	Parms.Actor = Actor;
	Parms.socket = socket;
	Parms.Event = std::move(Event);
	Parms.bAttached = bAttached;
	Parms.SocketTransform = std::move(SocketTransform);
	Parms.OptionalSwitch = OptionalSwitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.PostWwiseMessage
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const class FString&                    Message                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bError                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::PostWwiseMessage(const class FString& Message, bool bError)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "PostWwiseMessage");

	Params::GbxAudioBlueprintFunctionLibrary_PostWwiseMessage Parms{};

	Parms.Message = std::move(Message);
	Parms.bError = bError;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.RegisterManagedLoopOnActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EmitterTag                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxAudioEvent&            Event                                                  (Parm, NativeAccessSpecifierPublic)
// struct FManagedLoopHandle               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FManagedLoopHandle UGbxAudioBlueprintFunctionLibrary::RegisterManagedLoopOnActor(class AActor* Actor, class FName EmitterTag, const struct FGbxAudioEvent& Event)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "RegisterManagedLoopOnActor");

	Params::GbxAudioBlueprintFunctionLibrary_RegisterManagedLoopOnActor Parms{};

	Parms.Actor = Actor;
	Parms.EmitterTag = EmitterTag;
	Parms.Event = std::move(Event);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.RegisterManagedLoopOnActorSocket
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             socket                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxAudioEvent&            Event                                                  (Parm, NativeAccessSpecifierPublic)
// bool                                    bAttached                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxAudioEmitterSource&    SocketTransform                                        (Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FManagedLoopHandle               ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FManagedLoopHandle UGbxAudioBlueprintFunctionLibrary::RegisterManagedLoopOnActorSocket(class AActor* Actor, class FName socket, const struct FGbxAudioEvent& Event, bool bAttached, const struct FGbxAudioEmitterSource& SocketTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "RegisterManagedLoopOnActorSocket");

	Params::GbxAudioBlueprintFunctionLibrary_RegisterManagedLoopOnActorSocket Parms{};

	Parms.Actor = Actor;
	Parms.socket = socket;
	Parms.Event = std::move(Event);
	Parms.bAttached = bAttached;
	Parms.SocketTransform = std::move(SocketTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.SetEmitterRtpc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FGbxDefPtrProperty_                     Rtpc                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RtpcValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeTimeSeconds                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EmitterTag                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::SetEmitterRtpc(FGbxDefPtrProperty_ Rtpc, float RtpcValue, float FadeTimeSeconds, class AActor* Actor, class FName EmitterTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "SetEmitterRtpc");

	Params::GbxAudioBlueprintFunctionLibrary_SetEmitterRtpc Parms{};

	Parms.Rtpc = Rtpc;
	Parms.RtpcValue = RtpcValue;
	Parms.FadeTimeSeconds = FadeTimeSeconds;
	Parms.Actor = Actor;
	Parms.EmitterTag = EmitterTag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.SetGameParameter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGbxAudioPlaybackInstance& PlaybackInstance                                       (Parm, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     Rtpc                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RtpcValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeTimeSeconds                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::SetGameParameter(const struct FGbxAudioPlaybackInstance& PlaybackInstance, FGbxDefPtrProperty_ Rtpc, float RtpcValue, float FadeTimeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "SetGameParameter");

	Params::GbxAudioBlueprintFunctionLibrary_SetGameParameter Parms{};

	Parms.PlaybackInstance = std::move(PlaybackInstance);
	Parms.Rtpc = Rtpc;
	Parms.RtpcValue = RtpcValue;
	Parms.FadeTimeSeconds = FadeTimeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.SetGlobalRtpc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FGbxDefPtrProperty_                     Rtpc                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RtpcValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeTimeSeconds                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::SetGlobalRtpc(FGbxDefPtrProperty_ Rtpc, float RtpcValue, float FadeTimeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "SetGlobalRtpc");

	Params::GbxAudioBlueprintFunctionLibrary_SetGlobalRtpc Parms{};

	Parms.Rtpc = Rtpc;
	Parms.RtpcValue = RtpcValue;
	Parms.FadeTimeSeconds = FadeTimeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.SetListenerGameParameter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     Rtpc                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RtpcValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeTimeSeconds                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::SetListenerGameParameter(class UObject* WorldContextObject, class AActor* Actor, FGbxDefPtrProperty_ Rtpc, float RtpcValue, float FadeTimeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "SetListenerGameParameter");

	Params::GbxAudioBlueprintFunctionLibrary_SetListenerGameParameter Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.Actor = Actor;
	Parms.Rtpc = Rtpc;
	Parms.RtpcValue = RtpcValue;
	Parms.FadeTimeSeconds = FadeTimeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.SetManagedLoopGameParameter
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FManagedLoopHandle&        ManagedLoopHandle                                      (Parm, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     Rtpc                                                   (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   RtpcValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   FadeTimeSeconds                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::SetManagedLoopGameParameter(const struct FManagedLoopHandle& ManagedLoopHandle, FGbxDefPtrProperty_ Rtpc, float RtpcValue, float FadeTimeSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "SetManagedLoopGameParameter");

	Params::GbxAudioBlueprintFunctionLibrary_SetManagedLoopGameParameter Parms{};

	Parms.ManagedLoopHandle = std::move(ManagedLoopHandle);
	Parms.Rtpc = Rtpc;
	Parms.RtpcValue = RtpcValue;
	Parms.FadeTimeSeconds = FadeTimeSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.SetManagedLoopSwitch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FManagedLoopHandle&        ManagedLoopHandle                                      (Parm, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     Switch                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::SetManagedLoopSwitch(const struct FManagedLoopHandle& ManagedLoopHandle, FGbxDefPtrProperty_ Switch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "SetManagedLoopSwitch");

	Params::GbxAudioBlueprintFunctionLibrary_SetManagedLoopSwitch Parms{};

	Parms.ManagedLoopHandle = std::move(ManagedLoopHandle);
	Parms.Switch = Switch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.SetSoundTag
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGameplayTag&              SoundTag                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     EventDef                                               (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::SetSoundTag(class AActor* Actor, const struct FGameplayTag& SoundTag, FGbxDefPtrProperty_ EventDef)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "SetSoundTag");

	Params::GbxAudioBlueprintFunctionLibrary_SetSoundTag Parms{};

	Parms.Actor = Actor;
	Parms.SoundTag = std::move(SoundTag);
	Parms.EventDef = EventDef;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.SetState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// FGbxDefPtrProperty_                     StateName                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::SetState(FGbxDefPtrProperty_ StateName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "SetState");

	Params::GbxAudioBlueprintFunctionLibrary_SetState Parms{};

	Parms.StateName = StateName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.SetSwitch
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGbxAudioPlaybackInstance& PlaybackInstance                                       (Parm, NativeAccessSpecifierPublic)
// FGbxDefPtrProperty_                     Switch                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::SetSwitch(const struct FGbxAudioPlaybackInstance& PlaybackInstance, FGbxDefPtrProperty_ Switch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "SetSwitch");

	Params::GbxAudioBlueprintFunctionLibrary_SetSwitch Parms{};

	Parms.PlaybackInstance = std::move(PlaybackInstance);
	Parms.Switch = Switch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.Stop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FGbxAudioPlaybackInstance& PlaybackInstance                                       (Parm, NativeAccessSpecifierPublic)
// float                                   FadeTime                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::Stop(const struct FGbxAudioPlaybackInstance& PlaybackInstance, float FadeTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "Stop");

	Params::GbxAudioBlueprintFunctionLibrary_Stop Parms{};

	Parms.PlaybackInstance = std::move(PlaybackInstance);
	Parms.FadeTime = FadeTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.UnregisterManagedLoop
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// const struct FManagedLoopHandle&        ManagedLoopHandle                                      (Parm, NativeAccessSpecifierPublic)
// const struct FGbxAudioEvent&            StopEvent                                              (Parm, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::UnregisterManagedLoop(const struct FManagedLoopHandle& ManagedLoopHandle, const struct FGbxAudioEvent& StopEvent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "UnregisterManagedLoop");

	Params::GbxAudioBlueprintFunctionLibrary_UnregisterManagedLoop Parms{};

	Parms.ManagedLoopHandle = std::move(ManagedLoopHandle);
	Parms.StopEvent = std::move(StopEvent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.GbxAudioBlueprintFunctionLibrary.WaitForAudioPlayback
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FGbxAudioPlaybackInstance& PlaybackInstance                                       (Parm, NativeAccessSpecifierPublic)
// const struct FLatentActionInfo&         LatentInfo                                             (Parm, NoDestructor, NativeAccessSpecifierPublic)

void UGbxAudioBlueprintFunctionLibrary::WaitForAudioPlayback(class UObject* WorldContextObject, const struct FGbxAudioPlaybackInstance& PlaybackInstance, const struct FLatentActionInfo& LatentInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxAudioBlueprintFunctionLibrary", "WaitForAudioPlayback");

	Params::GbxAudioBlueprintFunctionLibrary_WaitForAudioPlayback Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.PlaybackInstance = std::move(PlaybackInstance);
	Parms.LatentInfo = std::move(LatentInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.MovieSceneGbxAudioEventSection.SetWwiseEvent
// (Final, RequiredAPI, Native, Public, BlueprintCallable)
// Parameters:
// const struct FGbxAudioEvent&            InEventHandle                                          (Parm, NativeAccessSpecifierPublic)
// class FName                             InEmitterSourceName                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInUseExistingEmitter                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMovieSceneGbxAudioEventSection::SetWwiseEvent(const struct FGbxAudioEvent& InEventHandle, class FName InEmitterSourceName, bool bInUseExistingEmitter)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieSceneGbxAudioEventSection", "SetWwiseEvent");

	Params::MovieSceneGbxAudioEventSection_SetWwiseEvent Parms{};

	Parms.InEventHandle = std::move(InEventHandle);
	Parms.InEmitterSourceName = InEmitterSourceName;
	Parms.bInUseExistingEmitter = bInUseExistingEmitter;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxAudio.MovieSceneGbxAudioEventSection.GetEventName
// (Final, RequiredAPI, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UMovieSceneGbxAudioEventSection::GetEventName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MovieSceneGbxAudioEventSection", "GetEventName");

	Params::MovieSceneGbxAudioEventSection_GetEventName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

