#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GbxDynamicWind

#include "Basic.hpp"

#include "GbxDynamicWind_classes.hpp"
#include "GbxDynamicWind_parameters.hpp"


namespace SDK
{

// Function GbxDynamicWind.GbxWindComponent.UpdateGlobalWind
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// const struct FVector3f&                 Wind                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxWindComponent::UpdateGlobalWind(const struct FVector3f& Wind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxWindComponent", "UpdateGlobalWind");

	Params::GbxWindComponent_UpdateGlobalWind Parms{};

	Parms.Wind = std::move(Wind);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDynamicWind.GbxWindSubsystem.AddGbxWindRadialImpulse
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   WorldPosition                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Radius                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FVector&                   ForceDirection                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ForceStrength                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxWindSubsystem::AddGbxWindRadialImpulse(class UObject* WorldContextObject, const struct FVector& WorldPosition, float Radius, const struct FVector& ForceDirection, float ForceStrength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GbxWindSubsystem", "AddGbxWindRadialImpulse");

	Params::GbxWindSubsystem_AddGbxWindRadialImpulse Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.WorldPosition = std::move(WorldPosition);
	Parms.Radius = Radius;
	Parms.ForceDirection = std::move(ForceDirection);
	Parms.ForceStrength = ForceStrength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function GbxDynamicWind.GbxWindSubsystem.RegisterGbxWindSphereSource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UGbxWindSphereSourceComponent*    SphereSource                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGbxWindSubsystem::RegisterGbxWindSphereSource(class UGbxWindSphereSourceComponent* SphereSource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GbxWindSubsystem", "RegisterGbxWindSphereSource");

	Params::GbxWindSubsystem_RegisterGbxWindSphereSource Parms{};

	Parms.SphereSource = SphereSource;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

